from telegram import Update, ReplyKeyboardRemove, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes,
    CallbackQueryHandler, filters
)
import sqlite3
from db import init_db, add_stars, get_user_settings, get_suitable_gifts, enable_auto_buy, disable_auto_buy, get_purchase_stats, create_star_check, claim_star_check, get_user_checks

TOKEN = "8183658865:AAHQjtIJWA8d_yk7cPceKFZ2f8x1riijxH0"

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}

# –°—Ç–∞—Ä—Ç
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —á–µ–∫–∞)
    if context.args:
        arg = context.args[0]
        if arg.startswith('check_'):
            check_id = arg.replace('check_', '')
            user_id = update.message.from_user.id
            
            # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —á–µ–∫
            success, result = claim_star_check(check_id, user_id)
            
            if success:
                await update.message.reply_text(
                    f"‚úÖ **–ß–µ–∫ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ!**\n\n"
                    f"üí´ –ü–æ–ª—É—á–µ–Ω–æ: {result['amount']} –∑–≤–µ–∑–¥\n"
                    f"üÜî ID —á–µ–∫–∞: `{check_id}`\n\n"
                    f"üéâ –ó–≤–µ–∑–¥—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å!\n\n"
                    f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:",
                    parse_mode="Markdown"
                )
            else:
                await update.message.reply_text(
                    f"‚ùå **–û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —á–µ–∫–∞:**\n{result}\n\n"
                    f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
                    parse_mode="Markdown"
                )
    
    await show_main_menu(update)

async def show_main_menu(update: Update, edit_message=False):
    keyboard = [
        [InlineKeyboardButton("üéÅ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–æ–¥–∞—Ä–∫–∏", callback_data='setup_gifts')],
        [InlineKeyboardButton("üí´ –ú–æ–π –±–∞–ª–∞–Ω—Å", callback_data='check_balance')],
        [InlineKeyboardButton("üõí –ö—É–ø–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ–¥–∞—Ä–æ–∫", callback_data='buy_existing_gift')],
        [InlineKeyboardButton("ü§ñ –ê–≤—Ç–æ–ø–æ–∫—É–ø–∫–∞", callback_data='auto_buy_settings')],
        [InlineKeyboardButton("üìä –ò—Å—Ç–æ—Ä–∏—è –ø–æ–∫—É–ø–æ–∫", callback_data='purchase_history')],
        [InlineKeyboardButton("üßæ –ß–µ–∫–∏", callback_data='check_receipts')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    text = (
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à –ª–∏—á–Ω—ã–π –±–æ—Ç –¥–ª—è –∞–≤—Ç–æ–ø–æ–∫—É–ø–∫–∏ Telegram –ø–æ–¥–∞—Ä–∫–æ–≤!\n\n"
        "üéÅ –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∞—Ä–∫–æ–≤\n"
        "üí´ –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –∑–≤–µ–∑–¥\n"
        "üõí –ö—É–ø–∏—Ç–µ —Å–ª—É—á–∞–π–Ω—ã–π –ø–æ–¥–∞—Ä–æ–∫ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å\n" 
        "ü§ñ –í–∫–ª—é—á–∏—Ç–µ –∞–≤—Ç–æ–ø–æ–∫—É–ø–∫—É –Ω–æ–≤—ã—Ö –ø–æ–¥–∞—Ä–∫–æ–≤\n"
        "üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø–æ–∫—É–ø–∫–∏\n\n"
        "‚û°Ô∏è –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/menu - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        "/addstars <—á–∏—Å–ª–æ> - –¥–æ–±–∞–≤–∏—Ç—å –∑–≤–µ–∑–¥—ã\n"
        "/sendstars @user <—á–∏—Å–ª–æ> - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–≤–µ–∑–¥—ã\n"
        "/buygift - –∫—É–ø–∏—Ç—å –ø–æ–¥–∞—Ä–∫–∏ —Å–µ–π—á–∞—Å\n"
        "/autobuy - –≤–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–ø–æ–∫—É–ø–∫—É\n"
        "/stopautobuy - –≤—ã–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–ø–æ–∫—É–ø–∫—É\n"
        "/balance - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å\n"
        "/stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∫—É–ø–æ–∫"
    )
    
    if edit_message and hasattr(update, 'callback_query'):
        await update.callback_query.edit_message_text(text, reply_markup=reply_markup, parse_mode="Markdown")
    else:
        await update.message.reply_text(text, reply_markup=reply_markup, parse_mode="Markdown")

async def buy_random_gift(query):
    """–ü–æ–∫—É–ø–∫–∞ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø–æ–¥–∞—Ä–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    import random
    
    user_id = query.from_user.id
    settings = get_user_settings(user_id)
    
    if not settings:
        await query.edit_message_text(
            "‚ùå **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã**\n\n"
            "–°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∞—Ä–∫–æ–≤!",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üéÅ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–æ–¥–∞—Ä–∫–∏", callback_data='setup_gifts')]]),
            parse_mode="Markdown"
        )
        return
    
    if settings['stars'] <= 0:
        await query.edit_message_text(
            "‚ùå **–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤–µ–∑–¥**\n\n"
            "–ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –ø–æ–¥–∞—Ä–∫–æ–≤!",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üí´ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data='check_balance')]]),
            parse_mode="Markdown"
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –ª–∏–º–∏—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    min_price = settings.get('min_price', 15)
    max_price = settings.get('max_price', 100)
    max_supply = settings.get('released_thousands', 50)
    
    # –ò—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –ø–æ–¥–∞—Ä–∫–∏
    suitable_gifts = get_suitable_gifts(user_id)
    
    if not suitable_gifts:
        await query.edit_message_text(
            f"‚ùå **–ü–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–æ–¥–∞—Ä–∫–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ**\n\n"
            f"üìã –í–∞—à–∏ –ª–∏–º–∏—Ç—ã:\n"
            f"‚≠ê –¶–µ–Ω–∞: {min_price}-{max_price} –∑–≤–µ–∑–¥\n"
            f"üì¶ –°–∞–ø–ø–ª–∞–π: –¥–æ {max_supply}k\n\n"
            f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–∞—Ä–∫–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üéÅ –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data='setup_gifts')],
                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')]
            ]),
            parse_mode="Markdown"
        )
        return
    
    # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –ø–æ–¥–∞—Ä–æ–∫
    gift = random.choice(suitable_gifts)
    gift_name, gift_price, gift_supply, gift_emoji = gift
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ö–≤–∞—Ç–∞–µ—Ç –ª–∏ –∑–≤–µ–∑–¥
    if settings['stars'] < gift_price:
        await query.edit_message_text(
            f"‚ùå **–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤–µ–∑–¥ –¥–ª—è –ø–æ–∫—É–ø–∫–∏**\n\n"
            f"{gift_emoji} **{gift_name}**\n"
            f"üí∞ –¶–µ–Ω–∞: {gift_price} –∑–≤–µ–∑–¥\n"
            f"üí´ –£ –≤–∞—Å: {settings['stars']} –∑–≤–µ–∑–¥\n"
            f"‚ùå –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç: {gift_price - settings['stars']} –∑–≤–µ–∑–¥",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üí´ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data='check_balance')],
                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')]
            ]),
            parse_mode="Markdown"
        )
        return
    
    # –ü–æ–∫—É–ø–∞–µ–º –ø–æ–¥–∞—Ä–æ–∫ (—Å–ø–∏—Å—ã–≤–∞–µ–º –∑–≤–µ–∑–¥—ã –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é)
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    
    # –°–ø–∏—Å—ã–≤–∞–µ–º –∑–≤–µ–∑–¥—ã
    new_balance = settings['stars'] - gift_price
    cursor.execute("UPDATE users SET stars = ? WHERE user_id = ?", (new_balance, user_id))
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ø–æ–∫—É–ø–∫—É –≤ –∏—Å—Ç–æ—Ä–∏—é
    cursor.execute("""
        INSERT INTO purchase_history (user_id, gift_name, stars_spent, status, is_auto)
        VALUES (?, ?, ?, 'success', 0)
    """, (user_id, gift_name, gift_price))
    
    conn.commit()
    conn.close()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∫—É–ø–∫–∏
    await query.edit_message_text(
        f"‚úÖ **–ü–æ–¥–∞—Ä–æ–∫ –∫—É–ø–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ!**\n\n"
        f"{gift_emoji} **{gift_name}**\n"
        f"üí∞ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: {gift_price} –∑–≤–µ–∑–¥\n"
        f"üì¶ –¢–∏—Ä–∞–∂: {gift_supply}k\n"
        f"üí´ –û—Å—Ç–∞—Ç–æ–∫: {new_balance} –∑–≤–µ–∑–¥\n\n"
        f"üéÅ –ü–æ–¥–∞—Ä–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≤–∞—à—É –∫–æ–ª–ª–µ–∫—Ü–∏—é!",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üõí –ö—É–ø–∏—Ç—å –µ—â–µ", callback_data='buy_existing_gift')],
            [InlineKeyboardButton("üìä –ò—Å—Ç–æ—Ä–∏—è –ø–æ–∫—É–ø–æ–∫", callback_data='purchase_history')],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')]
        ]),
        parse_mode="Markdown"
    )

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    await query.answer()

    if query.data == 'main_menu':
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        if user_id in user_states:
            del user_states[user_id]
        await show_main_menu(update, edit_message=True)
        return

    elif query.data == 'setup_gifts':
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        if user_id in user_states:
            del user_states[user_id]
            
        settings = get_user_settings(user_id)
        
        if settings:
            settings_text = f"üéÅ **–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∞—Ä–∫–æ–≤:**\n\n"
            settings_text += f"üîÑ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–∞—Ä–∫–æ–≤: {settings.get('auto_buy_cycles', 1)}\n"
            min_price = settings.get('min_price', 15)
            max_price = settings.get('max_price', 100)
            settings_text += f"‚≠ê –õ–∏–º–∏—Ç —Ü–µ–Ω—ã: {min_price}-{max_price} –∑–≤–µ–∑–¥\n"
            settings_text += f"üì¶ –õ–∏–º–∏—Ç —Å–∞–ø–ø–ª–∞—è: {settings['released_thousands']}k\n"
            settings_text += f"üí´ –ó–≤–µ–∑–¥ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ: {settings['stars']}\n\n"
            settings_text += f"–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?"
        else:
            settings_text = f"üéÅ **–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥–∞—Ä–∫–æ–≤**\n\n"
            settings_text += f"–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å:"
        
        keyboard = [
            [InlineKeyboardButton("üîÑ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–∞—Ä–∫–æ–≤", callback_data='set_cycles')],
            [InlineKeyboardButton("‚≠ê –õ–∏–º–∏—Ç —Ü–µ–Ω—ã –û–¢", callback_data='set_min_price')],
            [InlineKeyboardButton("‚≠ê –õ–∏–º–∏—Ç —Ü–µ–Ω—ã –î–û", callback_data='set_max_price')],
            [InlineKeyboardButton("üì¶ –õ–∏–º–∏—Ç —Å–∞–ø–ø–ª–∞—è", callback_data='change_supply_limit')],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(settings_text, reply_markup=reply_markup, parse_mode="Markdown")
    
    elif query.data == 'check_balance':
        settings = get_user_settings(user_id)
        if settings:
            balance_text = f"üí´ **–í–∞—à –±–∞–ª–∞–Ω—Å: {settings['stars']} –∑–≤–µ–∑–¥**\n\n"
            balance_text += f"‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:\n"
            balance_text += f"üîÑ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–∞—Ä–∫–æ–≤: {settings.get('auto_buy_cycles', 1)}\n"
            min_price = settings.get('min_price', 15)
            max_price = settings.get('max_price', 100)
            balance_text += f"‚≠ê –õ–∏–º–∏—Ç —Ü–µ–Ω—ã: {min_price}-{max_price} –∑–≤–µ–∑–¥\n"
            balance_text += f"üì¶ –õ–∏–º–∏—Ç —Å–∞–ø–ø–ª–∞—è: {settings['released_thousands']}k\n"
            balance_text += f"ü§ñ –ê–≤—Ç–æ–ø–æ–∫—É–ø–∫–∞: {'üü¢ –í–ö–õ' if settings['auto_buy'] else 'üî¥ –í–´–ö–õ'}\n"
            balance_text += f"‚ö° –ù–æ–≤—ã–µ –ø–æ–¥–∞—Ä–∫–∏: {'üü¢ –í–ö–õ' if settings['auto_buy_new_gifts'] else 'üî¥ –í–´–ö–õ'}"
        else:
            balance_text = "üí´ **–í–∞—à –±–∞–ª–∞–Ω—Å: 0 –∑–≤–µ–∑–¥**\n\n‚ùå –°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∞—Ä–∫–æ–≤!"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
        keyboard = [
            [InlineKeyboardButton("‚≠ê –ö—É–ø–∏—Ç—å –∑–≤–µ–∑–¥—ã –¥—ë—à–µ–≤–æ", callback_data='buy_stars_cheap')],
            [InlineKeyboardButton("‚≠ê –û–ø–ª–∞—Ç–∏—Ç—å —á–µ—Ä–µ–∑ Telegram", callback_data='buy_stars_telegram')],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(balance_text, reply_markup=reply_markup, parse_mode="Markdown")
        
    elif query.data == 'buy_existing_gift':
        await buy_random_gift(query)
        
    elif query.data == 'auto_buy_settings':
        settings = get_user_settings(user_id)
        auto_status = "üü¢ –í–ö–õ–Æ–ß–ï–ù–ê" if settings and settings['auto_buy'] else "üî¥ –í–´–ö–õ–Æ–ß–ï–ù–ê"
        new_gifts_status = "üü¢ –í–ö–õ" if settings and settings['auto_buy_new_gifts'] else "üî¥ –í–´–ö–õ"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        settings_text = f"ü§ñ **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–ø–æ–∫—É–ø–∫–∏**\n\n"
        settings_text += f"–°—Ç–∞—Ç—É—Å: {auto_status}\n"
        settings_text += f"–ù–æ–≤—ã–µ –ø–æ–¥–∞—Ä–∫–∏: {new_gifts_status}\n\n"
        
        if settings:
            settings_text += f"‚öôÔ∏è **–¢–µ–∫—É—â–∏–µ –ª–∏–º–∏—Ç—ã:**\n"
            settings_text += f"üîÑ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–∞—Ä–∫–æ–≤: {settings.get('auto_buy_cycles', 1)}\n"
            min_price = settings.get('min_price', 15)
            max_price = settings.get('max_price', 100)
            settings_text += f"‚≠ê –õ–∏–º–∏—Ç —Ü–µ–Ω—ã: {min_price}-{max_price} –∑–≤–µ–∑–¥\n"
            settings_text += f"üì¶ –õ–∏–º–∏—Ç —Å–∞–ø–ø–ª–∞—è: {settings['released_thousands']}k\n\n"
            settings_text += f"üí° –î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
            settings_text += f"üéÅ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–æ–¥–∞—Ä–∫–∏\n\n"
        
        settings_text += f"üí° **–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç:**\n"
        settings_text += f"‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç –Ω–æ–≤—ã–µ –ø–æ–¥–∞—Ä–∫–∏ –≤ Telegram\n"
        settings_text += f"‚Ä¢ –ü–æ–∫—É–ø–∞–µ—Ç –ø–æ –≤–∞—à–∏–º –ª–∏–º–∏—Ç–∞–º\n"
        settings_text += f"‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–∫—É–ø–∫–∞—Ö"
        
        keyboard = [
            [InlineKeyboardButton("üü¢ –í–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–ø–æ–∫—É–ø–∫—É", callback_data='enable_auto')],
            [InlineKeyboardButton("üî¥ –í—ã–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–ø–æ–∫—É–ø–∫—É", callback_data='disable_auto')],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(settings_text, reply_markup=reply_markup, parse_mode="Markdown")
        
    elif query.data == 'enable_auto':
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        settings = get_user_settings(user_id)
        
        if not settings:
            # –ï—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∏ –≤–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–ø–æ–∫—É–ø–∫—É
            enable_auto_buy(user_id, enable_new_gifts=True, max_stars_per_gift=50)
            settings_text = (
                "üü¢ **–ê–≤—Ç–æ–ø–æ–∫—É–ø–∫–∞ –í–ö–õ–Æ–ß–ï–ù–ê!**\n\n"
                "‚ö° –ê–≤—Ç–æ–ø–æ–∫—É–ø–∫–∞ –Ω–æ–≤—ã—Ö –ø–æ–¥–∞—Ä–∫–æ–≤: –í–ö–õ\n"
                "‚≠ê –õ–∏–º–∏—Ç —Ü–µ–Ω—ã: 50-100 –∑–≤–µ–∑–¥ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)\n"
                "üì¶ –õ–∏–º–∏—Ç —Å–∞–ø–ø–ª–∞—è: 10k (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)\n"
                "üîÑ –ü–æ–¥–∞—Ä–∫–æ–≤ –∑–∞ —Ä–∞–∑: 1 (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)\n\n"
                "‚ùó –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ 'üéÅ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–æ–¥–∞—Ä–∫–∏'\n\n"
                "ü§ñ –ë–æ—Ç –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–∫—É–ø–∞—Ç—å –Ω–æ–≤—ã–µ –ø–æ–¥–∞—Ä–∫–∏!"
            )
        else:
            # –í–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–ø–æ–∫—É–ø–∫—É —Å —Ç–µ–∫—É—â–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            max_price = settings.get('max_price', 100)
            enable_auto_buy(user_id, enable_new_gifts=True, max_stars_per_gift=max_price)
            
            min_price = settings.get('min_price', 15)
            supply_limit = settings.get('released_thousands', 10)
            cycles = settings.get('auto_buy_cycles', 1)
            
            settings_text = (
                "üü¢ **–ê–≤—Ç–æ–ø–æ–∫—É–ø–∫–∞ –í–ö–õ–Æ–ß–ï–ù–ê!**\n\n"
                "‚ö° –ê–≤—Ç–æ–ø–æ–∫—É–ø–∫–∞ –Ω–æ–≤—ã—Ö –ø–æ–¥–∞—Ä–∫–æ–≤: –í–ö–õ\n\n"
                "üìã **–í–∞—à–∏ –ª–∏–º–∏—Ç—ã:**\n"
                f"‚≠ê –¶–µ–Ω–∞: {min_price}-{max_price} –∑–≤–µ–∑–¥\n"
                f"üì¶ –°–∞–ø–ø–ª–∞–π: –¥–æ {supply_limit}k\n"
                f"üîÑ –ü–æ–¥–∞—Ä–∫–æ–≤ –∑–∞ —Ä–∞–∑: {cycles}\n"
                f"üí´ –ë–∞–ª–∞–Ω—Å: {settings['stars']} –∑–≤–µ–∑–¥\n\n"
                "ü§ñ –ë–æ—Ç –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–∫—É–ø–∞—Ç—å –Ω–æ–≤—ã–µ –ø–æ–¥–∞—Ä–∫–∏ –ø—Ä–∏ –∏—Ö –ø–æ—è–≤–ª–µ–Ω–∏–∏ –≤ Telegram!"
            )
        
        keyboard = [[InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(settings_text, reply_markup=reply_markup, parse_mode="Markdown")
        
    elif query.data == 'disable_auto':
        disable_auto_buy(user_id)
        keyboard = [[InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            "üî¥ **–ê–≤—Ç–æ–ø–æ–∫—É–ø–∫–∞ –í–´–ö–õ–Æ–ß–ï–ù–ê**\n\n"
            "–ë–æ—Ç –±–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–∫—É–ø–∞—Ç—å –ø–æ–¥–∞—Ä–∫–∏.",
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )
        
    elif query.data == 'purchase_history':
        history, stats = get_purchase_stats(user_id, limit=10)
        
        if history:
            history_text = f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∫—É–ø–æ–∫:**\n"
            history_text += f"üéÅ –í—Å–µ–≥–æ –∫—É–ø–ª–µ–Ω–æ: {stats[0]} –ø–æ–¥–∞—Ä–∫–æ–≤\n"
            history_text += f"üí´ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ –∑–≤–µ–∑–¥: {stats[1]}\n"
            history_text += f"ü§ñ –ê–≤—Ç–æ–ø–æ–∫—É–ø–æ–∫: {stats[2]}\n\n"
            history_text += f"**–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏:**\n"
            
            for gift_name, stars_spent, date, status, auto in history[:5]:
                status_emoji = "‚úÖ" if status == "success" else "‚ùå"
                auto_emoji = "ü§ñ" if auto else "üë§"
                history_text += f"{status_emoji}{auto_emoji} {gift_name} - {stars_spent}‚≠ê\n"
        else:
            history_text = "üìä –ò—Å—Ç–æ—Ä–∏—è –ø–æ–∫—É–ø–æ–∫ –ø—É—Å—Ç–∞"
            
        keyboard = [[InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')]]
        reply_markup = InlineKeyboardMarkup(keyboard)    
        await query.edit_message_text(history_text, reply_markup=reply_markup, parse_mode="Markdown")

    elif query.data == 'check_receipts':
        # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —á–µ–∫–æ–≤
        sent_checks, received_checks = get_user_checks(user_id, limit=5)
        
        checks_text = "üßæ **–í–∞—à–∏ —á–µ–∫–∏:**\n\n"
        
        if sent_checks:
            checks_text += "üì§ **–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ:**\n"
            for check_id, amount, to_username, status, created_at, claimed_at, message in sent_checks[:3]:
                status_emoji = "‚úÖ" if status == "claimed" else "‚è≥"
                recipient = f"@{to_username}" if to_username else "–õ—é–±–æ–π"
                checks_text += f"{status_emoji} {check_id} - {amount}‚≠ê ‚Üí {recipient}\n"
            checks_text += "\n"
        
        if received_checks:
            checks_text += "üì• **–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ:**\n"
            for check_id, amount, status, created_at, claimed_at, message in received_checks[:3]:
                checks_text += f"‚úÖ {check_id} - {amount}‚≠ê\n"
            checks_text += "\n"
        
        if not sent_checks and not received_checks:
            checks_text += "üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —á–µ–∫–æ–≤\n\n"
        
        checks_text += "üí° **–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**\n"
        checks_text += "‚Ä¢ –°–æ–∑–¥–∞—Ç—å —á–µ–∫ –¥–ª—è –≤—ã–≤–æ–¥–∞ –∑–≤–µ–∑–¥\n"
        checks_text += "‚Ä¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–≤–µ–∑–¥—ã –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é\n"
        checks_text += "‚Ä¢ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —á–µ–∫"
        
        keyboard = [
            [InlineKeyboardButton("üì§ –°–æ–∑–¥–∞—Ç—å —á–µ–∫", callback_data='create_check')],
            [InlineKeyboardButton("üì• –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —á–µ–∫", callback_data='activate_check')],
            [InlineKeyboardButton("üìã –í—Å–µ –º–æ–∏ —á–µ–∫–∏", callback_data='my_checks')],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(checks_text, reply_markup=reply_markup, parse_mode="Markdown")

    elif query.data == 'create_check':
        settings = get_user_settings(user_id)
        if not settings or settings['stars'] <= 0:
            await query.edit_message_text(
                "‚ùå **–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤–µ–∑–¥**\n\n"
                "–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —á–µ–∫–∞ –Ω—É–∂–Ω—ã –∑–≤–µ–∑–¥—ã –Ω–∞ –±–∞–ª–∞–Ω—Å–µ!",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üí´ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data='check_balance')]]),
                parse_mode="Markdown"
            )
            return
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ —Å—É–º–º—ã —á–µ–∫–∞
        user_states[user_id] = 'enter_check_amount'
        
        keyboard = [
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data='cancel_input')],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —á–µ–∫–∞–º", callback_data='check_receipts')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            f"üì§ **–°–æ–∑–¥–∞–Ω–∏–µ —á–µ–∫–∞**\n\n"
            f"üí´ –í–∞—à –±–∞–ª–∞–Ω—Å: {settings['stars']} –∑–≤–µ–∑–¥\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è —á–µ–∫–∞:\n"
            f"–ü—Ä–∏–º–µ—Ä: 100\n"
            f"–ü—Ä–∏–º–µ—Ä: 50",
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )
        
    elif query.data == 'activate_check':
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ ID —á–µ–∫–∞
        user_states[user_id] = 'enter_check_id'
        
        keyboard = [
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data='cancel_input')],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —á–µ–∫–∞–º", callback_data='check_receipts')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            "üì• **–ê–∫—Ç–∏–≤–∞—Ü–∏—è —á–µ–∫–∞**\n\n"
            "–í–≤–µ–¥–∏—Ç–µ ID —á–µ–∫–∞ –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å:\n"
            "–ü—Ä–∏–º–µ—Ä: a1b2c3d4\n\n"
            "üí° ID —á–µ–∫–∞ –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –≤ —Å—Å—ã–ª–∫–µ –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–∏ —Å —á–µ–∫–æ–º",
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )
        
    elif query.data == 'my_checks':
        sent_checks, received_checks = get_user_checks(user_id, limit=20)
        
        checks_text = "üìã **–í—Å–µ –≤–∞—à–∏ —á–µ–∫–∏:**\n\n"
        
        if sent_checks:
            checks_text += "üì§ **–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —á–µ–∫–∏:**\n"
            for check_id, amount, to_username, status, created_at, claimed_at, message in sent_checks:
                status_emoji = "‚úÖ" if status == "claimed" else "‚è≥"
                recipient = f"@{to_username}" if to_username else "–õ—é–±–æ–π"
                date = created_at.split(' ')[0] if created_at else ""
                checks_text += f"{status_emoji} `{check_id}` - {amount}‚≠ê ‚Üí {recipient} ({date})\n"
            checks_text += "\n"
        
        if received_checks:
            checks_text += "üì• **–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ —á–µ–∫–∏:**\n"
            for check_id, amount, status, created_at, claimed_at, message in received_checks:
                date = claimed_at.split(' ')[0] if claimed_at else ""
                checks_text += f"‚úÖ `{check_id}` - {amount}‚≠ê ({date})\n"
            checks_text += "\n"
        
        if not sent_checks and not received_checks:
            checks_text = "üì≠ **–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —á–µ–∫–æ–≤**\n\n–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π —á–µ–∫ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–≤–µ–∑–¥!"
        
        keyboard = [
            [InlineKeyboardButton("üì§ –°–æ–∑–¥–∞—Ç—å —á–µ–∫", callback_data='create_check')],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —á–µ–∫–∞–º", callback_data='check_receipts')],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(checks_text, reply_markup=reply_markup, parse_mode="Markdown")

    elif query.data == 'set_max_price':
        keyboard = [
            [InlineKeyboardButton("‚≠ê 15", callback_data='max_stars_15'), InlineKeyboardButton("‚≠ê 25", callback_data='max_stars_25')],
            [InlineKeyboardButton("‚≠ê 50", callback_data='max_stars_50'), InlineKeyboardButton("‚≠ê 100", callback_data='max_stars_100')],
            [InlineKeyboardButton("‚≠ê 200", callback_data='max_stars_200'), InlineKeyboardButton("‚≠ê 500", callback_data='max_stars_500')],
            [InlineKeyboardButton("‚≠ê 1000", callback_data='max_stars_1000'), InlineKeyboardButton("‚≠ê 1500", callback_data='max_stars_1500')],
            [InlineKeyboardButton("‚≠ê 2000", callback_data='max_stars_2000'), InlineKeyboardButton("‚≠ê 2500", callback_data='max_stars_2500')],
            [InlineKeyboardButton("‚≠ê 3000", callback_data='max_stars_3000'), InlineKeyboardButton("‚≠ê 5000", callback_data='max_stars_5000')],
            [InlineKeyboardButton("‚≠ê 7500", callback_data='max_stars_7500'), InlineKeyboardButton("‚≠ê 10000", callback_data='max_stars_10000')],
            [InlineKeyboardButton("‚≠ê 15000", callback_data='max_stars_15000'), InlineKeyboardButton("‚≠ê 20000", callback_data='max_stars_20000')],
            [InlineKeyboardButton("‚≠ê –£–±—Ä–∞—Ç—å –ª–∏–º–∏—Ç", callback_data='max_stars_unlimited')],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='setup_gifts')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            "–í—ã–±–µ—Ä–∏ –Ω–æ–≤—ã–π –º–∞–∫—Å–∏–º—É–º —Ü–µ–Ω—ã –¥–ª—è –∞–≤—Ç–æ–ø–æ–∫—É–ø–∫–∏:\n"
            "(–±–æ—Ç –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç –ø–æ–¥–∞—Ä–æ–∫ –¥–æ—Ä–æ–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞)",
            reply_markup=reply_markup
        )

    elif query.data == 'set_min_price':
        keyboard = [
            [InlineKeyboardButton("‚≠ê 15", callback_data='min_stars_15'), InlineKeyboardButton("‚≠ê 25", callback_data='min_stars_25')],
            [InlineKeyboardButton("‚≠ê 50", callback_data='min_stars_50'), InlineKeyboardButton("‚≠ê 100", callback_data='min_stars_100')],
            [InlineKeyboardButton("‚≠ê 200", callback_data='min_stars_200'), InlineKeyboardButton("‚≠ê 500", callback_data='min_stars_500')],
            [InlineKeyboardButton("‚≠ê 1000", callback_data='min_stars_1000'), InlineKeyboardButton("‚≠ê 1500", callback_data='min_stars_1500')],
            [InlineKeyboardButton("‚≠ê 2000", callback_data='min_stars_2000'), InlineKeyboardButton("‚≠ê 2500", callback_data='min_stars_2500')],
            [InlineKeyboardButton("‚≠ê 3000", callback_data='min_stars_3000'), InlineKeyboardButton("‚≠ê 5000", callback_data='min_stars_5000')],
            [InlineKeyboardButton("‚≠ê 10000", callback_data='min_stars_10000'), InlineKeyboardButton("‚≠ê 20000", callback_data='min_stars_20000')],
            [InlineKeyboardButton("‚≠ê –£–±—Ä–∞—Ç—å –ª–∏–º–∏—Ç", callback_data='min_stars_unlimited')],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='setup_gifts')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            "–í—ã–±–µ—Ä–∏ –Ω–æ–≤—ã–π –º–∏–Ω–∏–º—É–º —Ü–µ–Ω—ã –¥–ª—è –∞–≤—Ç–æ–ø–æ–∫—É–ø–∫–∏:\n"
            "(–±–æ—Ç –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç –ø–æ–¥–∞—Ä–æ–∫ –¥–µ—à–µ–≤–ª–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞)",
            reply_markup=reply_markup
        )

    elif query.data.startswith('min_stars_'):
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞ –∑–≤–µ–∑–¥
        if query.data == 'min_stars_unlimited':
            min_stars = 0
            stars_text = "–±–µ–∑ –ª–∏–º–∏—Ç–∞"
        else:
            min_stars = int(query.data.replace('min_stars_', ''))
            stars_text = f"{min_stars} –∑–≤–µ–∑–¥"
        
        user_id = query.from_user.id
        conn = sqlite3.connect('users.db')
        cursor = conn.cursor()
        cursor.execute("UPDATE users SET min_price = ? WHERE user_id = ?", (min_stars, user_id))
        if cursor.rowcount == 0:
            cursor.execute("INSERT INTO users (user_id, min_price) VALUES (?, ?)", (user_id, min_stars))
        conn.commit()
        conn.close()
        
        keyboard = [
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data='setup_gifts')],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            f"‚úÖ **–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!**\n\n"
            f"–ú–∏–Ω–∏–º—É–º –∑–∞ –ø–æ–¥–∞—Ä–æ–∫: {stars_text}\n"
            f"ü§ñ –ê–≤—Ç–æ–ø–æ–∫—É–ø–∫–∞ –±—É–¥–µ—Ç —É—á–∏—Ç—ã–≤–∞—Ç—å –Ω–æ–≤—ã–π –ª–∏–º–∏—Ç",
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )

    elif query.data.startswith('max_stars_'):
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞ –∑–≤–µ–∑–¥  
        if query.data == 'max_stars_unlimited':
            max_stars = 99999
            stars_text = "–±–µ–∑ –ª–∏–º–∏—Ç–∞"
        else:
            max_stars = int(query.data.replace('max_stars_', ''))
            stars_text = f"{max_stars} –∑–≤–µ–∑–¥"
        
        user_id = query.from_user.id
        conn = sqlite3.connect('users.db')
        cursor = conn.cursor()
        cursor.execute("UPDATE users SET max_price = ? WHERE user_id = ?", (max_stars, user_id))
        if cursor.rowcount == 0:
            cursor.execute("INSERT INTO users (user_id, max_price) VALUES (?, ?)", (user_id, max_stars))
        conn.commit()
        conn.close()
        
        keyboard = [
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data='setup_gifts')],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            f"‚úÖ **–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!**\n\n"
            f"–ú–∞–∫—Å–∏–º—É–º –∑–∞ –ø–æ–¥–∞—Ä–æ–∫: {stars_text}\n"
            f"ü§ñ –ê–≤—Ç–æ–ø–æ–∫—É–ø–∫–∞ –±—É–¥–µ—Ç —É—á–∏—Ç—ã–≤–∞—Ç—å –Ω–æ–≤—ã–π –ª–∏–º–∏—Ç",
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )

    elif query.data in ['set_cycles']:
        setting_type = query.data
        user_id = query.from_user.id
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_states[user_id] = setting_type
        
        instructions = {
            'set_cycles': "üîÑ **–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–¥–∞—Ä–∫–æ–≤**\n\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–∞—Ä–∫–æ–≤ –∑–∞ —Ä–∞–∑:\n–ü—Ä–∏–º–µ—Ä: 5"
        }
        
        keyboard = [
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data='cancel_input')],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data='setup_gifts')],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            f"‚öôÔ∏è {instructions[setting_type]}",
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )

    elif query.data == 'change_supply_limit':
        keyboard = [
            [InlineKeyboardButton("500", callback_data='supply_500'), InlineKeyboardButton("1000", callback_data='supply_1000')],
            [InlineKeyboardButton("1500", callback_data='supply_1500'), InlineKeyboardButton("1999", callback_data='supply_1999')],
            [InlineKeyboardButton("2000", callback_data='supply_2000'), InlineKeyboardButton("3000", callback_data='supply_3000')],
            [InlineKeyboardButton("5000", callback_data='supply_5000'), InlineKeyboardButton("7500", callback_data='supply_7500')],
            [InlineKeyboardButton("10000", callback_data='supply_10000'), InlineKeyboardButton("15000", callback_data='supply_15000')],
            [InlineKeyboardButton("25000", callback_data='supply_25000'), InlineKeyboardButton("50000", callback_data='supply_50000')],
            [InlineKeyboardButton("100000", callback_data='supply_100000'), InlineKeyboardButton("250000", callback_data='supply_250000')],
            [InlineKeyboardButton("‚≠ê –£–±—Ä–∞—Ç—å –ª–∏–º–∏—Ç", callback_data='supply_unlimited')],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='setup_gifts')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            "–í—ã–±–µ—Ä–∏ –Ω–æ–≤—ã–π –ª–∏–º–∏—Ç —Å–∞–ø–ø–ª–∞—è –¥–ª—è –∞–≤—Ç–æ–ø–æ–∫—É–ø–∫–∏:\n"
            "(–±–æ—Ç –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç –ø–æ–¥–∞—Ä–æ–∫, –µ—Å–ª–∏ –∏—Ö –≤—ã–ø—É—â–µ–Ω–æ –±–æ–ª—å—à–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞)",
            reply_markup=reply_markup
        )

    elif query.data.startswith('supply_'):
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ª–∏–º–∏—Ç–∞ —Å–∞–ø–ø–ª–∞—è
        if query.data == 'supply_unlimited':
            supply_limit = 999999
            supply_text = "–±–µ–∑ –ª–∏–º–∏—Ç–∞"
        else:
            supply_limit = int(query.data.replace('supply_', ''))
            supply_text = f"{supply_limit}k"
        
        user_id = query.from_user.id
        conn = sqlite3.connect('users.db')
        cursor = conn.cursor()
        cursor.execute("UPDATE users SET released_thousands = ? WHERE user_id = ?", (supply_limit, user_id))
        if cursor.rowcount == 0:
            cursor.execute("INSERT INTO users (user_id, released_thousands) VALUES (?, ?)", (user_id, supply_limit))
        conn.commit()
        conn.close()

        keyboard = [
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data='setup_gifts')],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            f"üì¶ **–õ–∏–º–∏—Ç —Å–∞–ø–ø–ª–∞—è –æ–±–Ω–æ–≤–ª–µ–Ω!**\n\n"
            f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ç–∏—Ä–∞–∂: {supply_text}\n"
            f"ü§ñ –ê–≤—Ç–æ–ø–æ–∫—É–ø–∫–∞ –±—É–¥–µ—Ç —É—á–∏—Ç—ã–≤–∞—Ç—å –Ω–æ–≤—ã–π –ª–∏–º–∏—Ç",
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )

    elif query.data.startswith('buy_stars_'):
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∫—É–ø–∫–∏ –∑–≤–µ–∑–¥
        if query.data == 'buy_stars_100':
            # –í—ã–∑—ã–≤–∞–µ–º –ø–ª–∞—Ç–µ–∂ —á–µ—Ä–µ–∑ Telegram Stars
            from telegram import LabeledPrice
            
            await query.edit_message_text(
                "üí´ **–û–ø–ª–∞—Ç–∞ 100 –∑–≤–µ–∑–¥**\n\n"
                "–°–µ–π—á–∞—Å –æ—Ç–∫—Ä–æ–µ—Ç—Å—è –æ–∫–Ω–æ –æ–ø–ª–∞—Ç—ã Telegram Stars.",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='main_menu')]])
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º invoice –¥–ª—è –æ–ø–ª–∞—Ç—ã
            await context.bot.send_invoice(
                chat_id=query.from_user.id,
                title="‚≠ê –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ",
                description="–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –∑–≤–µ–∑–¥",
                payload="stars_100",
                provider_token="",  # –î–ª—è Telegram Stars –Ω–µ –Ω—É–∂–µ–Ω
                currency="XTR",  # Telegram Stars
                prices=[LabeledPrice("–ó–≤–µ–∑–¥—ã", 100)]
            )
            
        elif query.data == 'buy_stars_cheap':
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –≤–≤–æ–¥–∞ —Å—É–º–º—ã –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
            user_states[user_id] = 'enter_stars_amount'
            
            keyboard = [
                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data='cancel_input')],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='check_balance')]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                "üí´ **–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –∑–≤–µ–∑–¥**\n\n"
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –í –ß–ê–¢ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –≤ –∑–≤–µ–∑–¥–∞—Ö:\n"
                "(–∫–æ–º–∏—Å—Å–∏—è —Å–µ—Ä–≤–∏—Å–∞ 5%)\n\n"
                "–ü—Ä–∏–º–µ—Ä: 100\n\n"
                "–ï—Å–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –∑–≤–µ–∑–¥, –∫—É–ø–∏—Ç–µ –∏—Ö –Ω–∞ –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç –ø–æ —Å—Å—ã–ª–∫–µ",
                reply_markup=reply_markup,
                parse_mode="Markdown"
            )
            
        elif query.data == 'buy_stars_telegram':
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –≤–≤–æ–¥–∞ —Å—É–º–º—ã –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è  
            user_states[user_id] = 'enter_stars_amount'
            
            keyboard = [
                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data='cancel_input')],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='check_balance')]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                "üí´ **–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Telegram Stars**\n\n"
                "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:\n\n"
                "–ü—Ä–∏–º–µ—Ä: 12\n"
                "–ü—Ä–∏–º–µ—Ä: 50\n"
                "–ü—Ä–∏–º–µ—Ä: 100",
                reply_markup=reply_markup,
                parse_mode="Markdown"
            )

    elif query.data == 'cancel_input':
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = query.from_user.id
        if user_id in user_states:
            del user_states[user_id]
        
        await query.edit_message_text(
            "‚ùå **–í–≤–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω**\n\n–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üéÅ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–æ–¥–∞—Ä–∫–∏", callback_data='setup_gifts')]])
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π
async def successful_payment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    payment = update.message.successful_payment
    
    if payment.invoice_payload == "stars_100":
        # –î–æ–±–∞–≤–ª—è–µ–º 100 –∑–≤–µ–∑–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        total_stars = add_stars(user_id, 100)

        await update.message.reply_text(
            f"‚úÖ **–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!**\n\n"
            f"üí´ –î–æ–±–∞–≤–ª–µ–Ω–æ: 100 –∑–≤–µ–∑–¥\n"
            f"üí´ –í—Å–µ–≥–æ —É –≤–∞—Å: {total_stars} –∑–≤–µ–∑–¥\n\n"
            f"üéÅ –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –ø–æ–∫—É–ø–∞—Ç—å –ø–æ–¥–∞—Ä–∫–∏!",
            parse_mode="Markdown"
        )
    elif payment.invoice_payload.startswith("stars_"):
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥ –∏–∑ payload
        try:
            stars_amount = int(payment.invoice_payload.replace("stars_", ""))
            total_stars = add_stars(user_id, stars_amount)
            
            await update.message.reply_text(
                f"‚úÖ **–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!**\n\n"
                f"üí´ –î–æ–±–∞–≤–ª–µ–Ω–æ: {stars_amount} –∑–≤–µ–∑–¥\n"
                f"üí´ –í—Å–µ–≥–æ —É –≤–∞—Å: {total_stars} –∑–≤–µ–∑–¥\n\n"
                f"üéÅ –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –ø–æ–∫—É–ø–∞—Ç—å –ø–æ–¥–∞—Ä–∫–∏!",
                parse_mode="Markdown"
            )
        except ValueError:
            await update.message.reply_text(
                f"‚ùå **–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞**\n\n"
                f"–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É —Å —É–∫–∞–∑–∞–Ω–∏–µ–º ID –ø–ª–∞—Ç–µ–∂–∞: {payment.invoice_payload}",
                parse_mode="Markdown"
            )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—ã—á–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_text_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    user_id = update.message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞
    if user_id in user_states:
        state = user_states[user_id]
        
        try:
            if state == 'set_cycles':
                cycles = int(text)
                if cycles <= 0:
                    raise ValueError
                
                conn = sqlite3.connect('users.db')
                cursor = conn.cursor()
                cursor.execute("UPDATE users SET auto_buy_cycles = ? WHERE user_id = ?", (cycles, user_id))
                if cursor.rowcount == 0:
                    cursor.execute("INSERT INTO users (user_id, auto_buy_cycles) VALUES (?, ?)", (user_id, cycles))
                conn.commit()
                conn.close()
                
                del user_states[user_id]
                
                keyboard = [[InlineKeyboardButton("üéÅ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–æ–¥–∞—Ä–∫–∏", callback_data='setup_gifts')]]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await update.message.reply_text(
                    f"‚úÖ **–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–∞—Ä–∫–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!**\n\n"
                    f"–ü–æ–¥–∞—Ä–∫–æ–≤ –∑–∞ —Ä–∞–∑: {cycles}",
                    reply_markup=reply_markup,
                    parse_mode="Markdown"
                )
                return
            
            elif state == 'enter_stars_amount':
                stars_amount = int(text)
                if stars_amount <= 0:
                    raise ValueError
                    
                del user_states[user_id]
                
                # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ —á–µ—Ä–µ–∑ Telegram Stars
                from telegram import LabeledPrice
                
                try:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º invoice –¥–ª—è –æ–ø–ª–∞—Ç—ã —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–≤–µ–∑–¥
                    await context.bot.send_invoice(
                        chat_id=user_id,
                        title="‚≠ê –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ",
                        description="‚≠ê AutoGifts - –ü–æ–∫—É–ø–∫–∞ –ø–æ–¥–∞—Ä–∫–æ–≤ Telegram",
                        payload=f"stars_{stars_amount}",
                        provider_token="",  # –î–ª—è Telegram Stars –Ω–µ –Ω—É–∂–µ–Ω
                        currency="XTR",  # Telegram Stars
                        prices=[LabeledPrice("–ó–≤–µ–∑–¥—ã", stars_amount)]
                    )
                except Exception as e:
                    await update.message.reply_text(
                        f"‚ùå **–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞**\n\n"
                        f"–î–µ—Ç–∞–ª–∏: {str(e)}\n\n"
                        f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
                        parse_mode="Markdown"
                    )
                return
            
            elif state == 'enter_check_amount':
                amount = int(text)
                if amount <= 0:
                    raise ValueError
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                settings = get_user_settings(user_id)
                if not settings or settings['stars'] < amount:
                    await update.message.reply_text(
                        f"‚ùå **–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤–µ–∑–¥**\n\n"
                        f"–ù—É–∂–Ω–æ: {amount} –∑–≤–µ–∑–¥\n"
                        f"–£ –≤–∞—Å: {settings['stars'] if settings else 0} –∑–≤–µ–∑–¥",
                        parse_mode="Markdown"
                    )
                    return
                
                # –°–æ–∑–¥–∞–µ–º —á–µ–∫
                check_id, result = create_star_check(user_id, amount)
                
                if check_id:
                    del user_states[user_id]
                    
                    keyboard = [
                        [InlineKeyboardButton("üìã –ú–æ–∏ —á–µ–∫–∏", callback_data='my_checks')],
                        [InlineKeyboardButton("üßæ –ß–µ–∫–∏", callback_data='check_receipts')],
                        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')]
                    ]
                    reply_markup = InlineKeyboardMarkup(keyboard)
                    
                    await update.message.reply_text(
                        f"‚úÖ **–ß–µ–∫ —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!**\n\n"
                        f"üÜî ID —á–µ–∫–∞: `{check_id}`\n"
                        f"üí´ –°—É–º–º–∞: {amount} –∑–≤–µ–∑–¥\n"
                        f"üì§ –ü–æ–ª—É—á–∞—Ç–µ–ª—å: –õ—é–±–æ–π\n\n"
                        f"üîó –°—Å—ã–ª–∫–∞ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏:\n"
                        f"https://t.me/{context.bot.username}?start=check_{check_id}\n\n"
                        f"üí° –û—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É —Ç–æ–º—É, –∫–æ–º—É —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–¥–∞—Ç—å –∑–≤–µ–∑–¥—ã!",
                        reply_markup=reply_markup,
                        parse_mode="Markdown"
                    )
                else:
                    await update.message.reply_text(
                        f"‚ùå **–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —á–µ–∫–∞:**\n{result}",
                        parse_mode="Markdown"
                    )
                return
            
            elif state == 'enter_check_id':
                check_id = text.strip()
                del user_states[user_id]
                
                # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —á–µ–∫
                success, result = claim_star_check(check_id, user_id)
                
                if success:
                    keyboard = [
                        [InlineKeyboardButton("üí´ –ú–æ–π –±–∞–ª–∞–Ω—Å", callback_data='check_balance')],
                        [InlineKeyboardButton("üßæ –ß–µ–∫–∏", callback_data='check_receipts')],
                        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')]
                    ]
                    reply_markup = InlineKeyboardMarkup(keyboard)
                    
                    await update.message.reply_text(
                        f"‚úÖ **–ß–µ–∫ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ!**\n\n"
                        f"üí´ –ü–æ–ª—É—á–µ–Ω–æ: {result['amount']} –∑–≤–µ–∑–¥\n"
                        f"üÜî ID —á–µ–∫–∞: `{check_id}`\n\n"
                        f"üéâ –ó–≤–µ–∑–¥—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å!",
                        reply_markup=reply_markup,
                        parse_mode="Markdown"
                    )
                else:
                    keyboard = [
                        [InlineKeyboardButton("üì• –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ", callback_data='activate_check')],
                        [InlineKeyboardButton("üßæ –ß–µ–∫–∏", callback_data='check_receipts')]
                    ]
                    reply_markup = InlineKeyboardMarkup(keyboard)
                    
                    await update.message.reply_text(
                        f"‚ùå **–û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —á–µ–∫–∞:**\n{result}",
                        reply_markup=reply_markup,
                        parse_mode="Markdown"
                    )
                return
            
        except (ValueError, IndexError):
            await update.message.reply_text(
                "‚ùå **–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!**\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ‚ùå –û—Ç–º–µ–Ω–∏—Ç—å"
            )
            return
    
    # –ï—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –Ω–µ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø—Ä–∞–≤–∫—É
    await update.message.reply_text(
        "‚ùì **–ù–µ –ø–æ–Ω–∏–º–∞—é –∫–æ–º–∞–Ω–¥—É**\n\n"
        "üí° **–î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:**\n"
        "/setgiftcount <—á–∏—Å–ª–æ> - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–∞—Ä–∫–æ–≤\n"
        "/setpricerange <–º–∏–Ω>-<–º–∞–∫—Å> - –¥–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω\n"
        "/setsupply <—á–∏—Å–ª–æ> - –ª–∏–º–∏—Ç —Å–∞–ø–ø–ª–∞—è\n"
        "/setmaxstars <—á–∏—Å–ª–æ> - –ª–∏–º–∏—Ç –∑–≤–µ–∑–¥\n"
        "/setcycles <—á–∏—Å–ª–æ> - —Ü–∏–∫–ª—ã –∞–≤—Ç–æ–ø–æ–∫—É–ø–∫–∏\n\n"
        "üìã **–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**\n"
        "/start - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        "/addstars - –ø–æ–ø–æ–ª–Ω–∏—Ç—å –∑–≤–µ–∑–¥—ã\n"
        "/buygift - –∫—É–ø–∏—Ç—å –ø–æ–¥–∞—Ä–∫–∏\n"
        "/autobuy - –≤–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–ø–æ–∫—É–ø–∫—É",
        parse_mode="Markdown"
    )

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–≤—ë–∑–¥
async def addstars(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    
    # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ —á–∏—Å–ª–æ - –¥–æ–±–∞–≤–ª—è–µ–º —Å—Ä–∞–∑—É (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
    if context.args:
        try:
            stars = int(context.args[0])
            if stars <= 0:
                raise ValueError
            
            total_stars = add_stars(user_id, stars)
            
            await update.message.reply_text(
                f"‚ú® –î–æ–±–∞–≤–ª–µ–Ω–æ {stars} –∑–≤–µ–∑–¥!\n"
                f"üí´ –í—Å–µ–≥–æ —É –≤–∞—Å: {total_stars} –∑–≤–µ–∑–¥\n\n"
                f"üéÅ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /buygift –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –ø–æ–¥–∞—Ä–∫–æ–≤"
            )
            return
        except (ValueError, IndexError):
            pass
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—é
    keyboard = [
        [InlineKeyboardButton("‚≠ê –û–ø–ª–∞—Ç–∏—Ç—å 100 STARS", callback_data='buy_stars_100')],
        [InlineKeyboardButton("‚≠ê –ö—É–ø–∏—Ç—å –∑–≤–µ–∑–¥—ã –¥—ë—à–µ–≤–æ", callback_data='buy_stars_cheap')],
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "üí´ **–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –∑–≤–µ–∑–¥**\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:\n\n"
        "‚≠ê **Telegram Stars** - –±—ã—Å—Ç—Ä–æ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ\n"
        "üí∞ **–î–µ—à–µ–≤–∞—è –ø–æ–∫—É–ø–∫–∞** - –ø–æ –≤—ã–≥–æ–¥–Ω–æ–π —Ü–µ–Ω–µ\n\n"
        "üí° –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: `/addstars <—á–∏—Å–ª–æ>`",
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )

# –ü–æ–∫—É–ø–∫–∞ –ø–æ–¥–∞—Ä–∫–∞
async def buygift(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    settings = get_user_settings(user_id)
    
    if not settings:
        await update.message.reply_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∞—Ä–∫–æ–≤ –∫–æ–º–∞–Ω–¥–æ–π /start")
        return
        
    if settings['stars'] <= 0:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∑–≤–µ–∑–¥ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –ø–æ–¥–∞—Ä–∫–∞.\nüí´ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /addstars <—á–∏—Å–ª–æ>")
        return
    
    # –ü–æ–º–µ—á–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–∫—É–ø–∫—É –≤ –±–∞–∑–µ
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    cursor.execute("UPDATE users SET want_to_buy = 1 WHERE user_id = ?", (user_id,))
    conn.commit()
    conn.close()
    
    await update.message.reply_text(
        f"üéÅ –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–∫—É–ø–∫—É –ø—Ä–∏–Ω—è—Ç!\n\n"
        f"üìã –í–∞—à–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n"
        f"üéÅ –ü–æ–¥–∞—Ä–∫–æ–≤: {settings['gift_count']}\n"
        f"üí∞ –ë—é–¥–∂–µ—Ç: {settings['max_price']}‚ÇΩ –∑–∞ –ø–æ–¥–∞—Ä–æ–∫\n"
        f"üí´ –ó–≤–µ–∑–¥: {settings['stars']}\n\n"
        f"‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫–∞–∑–∞..."
    )

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞
async def balance(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    settings = get_user_settings(user_id)
    
    if settings:
        min_supply = settings.get('min_released_thousands', 1)
        max_supply = settings['released_thousands']
        
        await update.message.reply_text(
            f"üí´ –í–∞—à –±–∞–ª–∞–Ω—Å: {settings['stars']} –∑–≤–µ–∑–¥\n\n"
            f"‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:\n"
            f"üéÅ –ü–æ–¥–∞—Ä–∫–æ–≤ –∑–∞ —Ä–∞–∑: {settings['gift_count']}\n"
            f"üí∞ –ú–∞–∫—Å. —Ü–µ–Ω–∞: {settings['max_price']}‚ÇΩ\n"
            f"üì¶ –õ–∏–º–∏—Ç —Å–∞–ø–ø–ª–∞—è: {min_supply}k-{max_supply}k"
        )
    else:
        await update.message.reply_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∞—Ä–∫–æ–≤ –∫–æ–º–∞–Ω–¥–æ–π /start")

# –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–¥–∞—Ä–∫–∏
async def gifts(update: Update, context: ContextTypes.DEFAULT_TYPE):
    conn = sqlite3.connect('users.db')
    c = conn.cursor()
    c.execute('SELECT name, price_stars, price_rubles, emoji FROM available_gifts WHERE is_active = 1')
    gifts = c.fetchall()
    conn.close()
    
    gifts_text = "üéÅ –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–¥–∞—Ä–∫–∏:\n\n"
    for name, stars, rubles, emoji in gifts:
        gifts_text += f"{emoji} {name} - {stars}‚≠ê ({rubles}‚ÇΩ)\n"
        
    await update.message.reply_text(gifts_text)

# –ê–≤—Ç–æ–ø–æ–∫—É–ø–∫–∞ –∫–æ–º–∞–Ω–¥—ã
async def autobuy(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã
    if context.args:
        try:
            max_stars = int(context.args[0])
            if max_stars <= 0:
                raise ValueError
        except ValueError:
            await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /autobuy [–º–∞–∫—Å_–∑–≤–µ–∑–¥_–∑–∞_–ø–æ–¥–∞—Ä–æ–∫]\n–ü—Ä–∏–º–µ—Ä: /autobuy 25")
            return
    else:
        max_stars = 50  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
    
    settings = get_user_settings(user_id)
    if not settings:
        await update.message.reply_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∞—Ä–∫–æ–≤ –∫–æ–º–∞–Ω–¥–æ–π /start")
        return
        
    if settings['stars'] <= 0:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∑–≤–µ–∑–¥. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /addstars <—á–∏—Å–ª–æ>")
        return
    
    enable_auto_buy(user_id, enable_new_gifts=True, max_stars_per_gift=max_stars)
    
    await update.message.reply_text(
        f"üü¢ **–ê–≤—Ç–æ–ø–æ–∫—É–ø–∫–∞ –í–ö–õ–Æ–ß–ï–ù–ê!**\n\n"
        f"‚ö° –ê–≤—Ç–æ–ø–æ–∫—É–ø–∫–∞ –Ω–æ–≤—ã—Ö –ø–æ–¥–∞—Ä–∫–æ–≤: –í–ö–õ\n"
        f"‚≠ê –ú–∞–∫—Å. –∑–≤–µ–∑–¥ –∑–∞ –ø–æ–¥–∞—Ä–æ–∫: {max_stars}\n"
        f"üí´ –í–∞—à –±–∞–ª–∞–Ω—Å: {settings['stars']} –∑–≤–µ–∑–¥\n\n"
        f"ü§ñ –ë–æ—Ç –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–∫—É–ø–∞—Ç—å –Ω–æ–≤—ã–µ Telegram –ø–æ–¥–∞—Ä–∫–∏ –ø—Ä–∏ –∏—Ö –ø–æ—è–≤–ª–µ–Ω–∏–∏!",
        parse_mode="Markdown"
    )

async def stopautobuy(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    disable_auto_buy(user_id)
    
    await update.message.reply_text(
        "üî¥ **–ê–≤—Ç–æ–ø–æ–∫—É–ø–∫–∞ –í–´–ö–õ–Æ–ß–ï–ù–ê**\n\n"
        "–ë–æ—Ç –±–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–∫—É–ø–∞—Ç—å –ø–æ–¥–∞—Ä–∫–∏.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /autobuy –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤–∫–ª—é—á–µ–Ω–∏—è.",
        parse_mode="Markdown"
    )

async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    history, stats = get_purchase_stats(user_id, limit=20)
    
    if not history:
        await update.message.reply_text("üìä –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–∫—É–ø–æ–∫")
        return
    
    stats_text = f"üìä **–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n\n"
    stats_text += f"üéÅ –í—Å–µ–≥–æ –∫—É–ø–ª–µ–Ω–æ: **{stats[0]}** –ø–æ–¥–∞—Ä–∫–æ–≤\n"
    stats_text += f"üí´ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ –∑–≤–µ–∑–¥: **{stats[1]}**\n"
    stats_text += f"ü§ñ –ê–≤—Ç–æ–ø–æ–∫—É–ø–æ–∫: **{stats[2]}**\n"
    stats_text += f"üë§ –†—É—á–Ω—ã—Ö –ø–æ–∫—É–ø–æ–∫: **{stats[0] - stats[2]}**\n\n"
    
    if len(history) > 0:
        stats_text += f"**–ü–æ—Å–ª–µ–¥–Ω–∏–µ {min(10, len(history))} –ø–æ–∫—É–ø–æ–∫:**\n"
        for gift_name, stars_spent, date, status, auto in history[:10]:
            status_emoji = "‚úÖ" if status == "success" else "‚ùå"
            auto_emoji = "ü§ñ" if auto else "üë§"
            stats_text += f"{status_emoji}{auto_emoji} {gift_name} - {stars_spent}‚≠ê\n"
    
    await update.message.reply_text(stats_text, parse_mode="Markdown")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
async def menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await show_main_menu(update)

# –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞–≤—Ç–æ–ø–æ–∫—É–ø–∫–∏
async def setmaxstars(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    try:
        max_stars = int(context.args[0]) if context.args else 0
        if max_stars <= 0:
            raise ValueError
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        conn = sqlite3.connect('users.db')
        cursor = conn.cursor()
        cursor.execute("UPDATE users SET max_stars_per_gift = ? WHERE user_id = ?", (max_stars, user_id))
        conn.commit()
        conn.close()
        
        await update.message.reply_text(
            f"‚≠ê **–õ–∏–º–∏—Ç –∑–≤–µ–∑–¥ –æ–±–Ω–æ–≤–ª–µ–Ω!**\n\n"
            f"–ú–∞–∫—Å–∏–º—É–º –∑–∞ –ø–æ–¥–∞—Ä–æ–∫: {max_stars} –∑–≤–µ–∑–¥\n"
            f"ü§ñ –ê–≤—Ç–æ–ø–æ–∫—É–ø–∫–∞ –±—É–¥–µ—Ç —É—á–∏—Ç—ã–≤–∞—Ç—å –Ω–æ–≤—ã–π –ª–∏–º–∏—Ç",
            parse_mode="Markdown"
        )
    except (ValueError, IndexError):
        await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /setmaxstars <—á–∏—Å–ª–æ>\n–ü—Ä–∏–º–µ—Ä: /setmaxstars 75")

async def setpricerange(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    try:
        if not context.args or '-' not in context.args[0]:
            raise ValueError
        
        price_range = context.args[0].split('-')
        min_price = int(price_range[0])
        max_price = int(price_range[1])
        
        if min_price < 0 or max_price < min_price:
            raise ValueError
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        conn = sqlite3.connect('users.db')
        cursor = conn.cursor()
        cursor.execute("UPDATE users SET min_price = ?, max_price = ? WHERE user_id = ?", (min_price, max_price, user_id))
        conn.commit()
        conn.close()
        
        await update.message.reply_text(
            f"üí∞ **–î–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω –æ–±–Ω–æ–≤–ª–µ–Ω!**\n\n"
            f"–û—Ç {min_price}‚ÇΩ –¥–æ {max_price}‚ÇΩ\n"
            f"ü§ñ –ê–≤—Ç–æ–ø–æ–∫—É–ø–∫–∞ –±—É–¥–µ—Ç –ø–æ–∫—É–ø–∞—Ç—å –ø–æ–¥–∞—Ä–∫–∏ –≤ —ç—Ç–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ",
            parse_mode="Markdown"
        )
    except (ValueError, IndexError):
        await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /setpricerange <–º–∏–Ω>-<–º–∞–∫—Å>\n–ü—Ä–∏–º–µ—Ä: /setpricerange 100-1000")

async def setsupply(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    try:
        supply_limit = int(context.args[0]) if context.args else 0
        if supply_limit < 0:
            raise ValueError
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        conn = sqlite3.connect('users.db')
        cursor = conn.cursor()
        cursor.execute("UPDATE users SET released_thousands = ? WHERE user_id = ?", (supply_limit, user_id))
        conn.commit()
        conn.close()
        
        await update.message.reply_text(
            f"üì¶ **–õ–∏–º–∏—Ç —Å–∞–ø–ø–ª–∞—è –æ–±–Ω–æ–≤–ª–µ–Ω!**\n\n"
            f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ç–∏—Ä–∞–∂: {supply_limit}k –ø–æ–¥–∞—Ä–∫–æ–≤\n"
            f"ü§ñ –ê–≤—Ç–æ–ø–æ–∫—É–ø–∫–∞ –±—É–¥–µ—Ç –ø–æ–∫—É–ø–∞—Ç—å —Ç–æ–ª—å–∫–æ –ø–æ–¥–∞—Ä–∫–∏ —Å —Ç–∏—Ä–∞–∂–æ–º –¥–æ {supply_limit}000",
            parse_mode="Markdown"
        )
    except (ValueError, IndexError):
        await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /setsupply <—á–∏—Å–ª–æ>\n–ü—Ä–∏–º–µ—Ä: /setsupply 50")

async def setcycles(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    try:
        cycles = int(context.args[0]) if context.args else 0
        if cycles <= 0:
            raise ValueError
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        conn = sqlite3.connect('users.db')
        cursor = conn.cursor()
        cursor.execute("UPDATE users SET auto_buy_cycles = ? WHERE user_id = ?", (cycles, user_id))
        conn.commit()
        conn.close()
        
        await update.message.reply_text(
            f"üîÑ **–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–∞—Ä–∫–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!**\n\n"
            f"–ü–æ–¥–∞—Ä–∫–æ–≤ –∑–∞ —Ä–∞–∑: {cycles}\n"
            f"ü§ñ –ë–æ—Ç –±—É–¥–µ—Ç –ø–æ–∫—É–ø–∞—Ç—å {cycles} —à—Ç—É–∫ –ø–æ–¥–∞—Ä–∫–æ–≤ –ø—Ä–∏ –∫–∞–∂–¥–æ–π –ø–æ–∫—É–ø–∫–µ",
            parse_mode="Markdown"
        )
    except (ValueError, IndexError):
        await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /setcycles <—á–∏—Å–ª–æ>\n–ü—Ä–∏–º–µ—Ä: /setcycles 5")

async def setgiftcount(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    try:
        gift_count = int(context.args[0]) if context.args else 0
        if gift_count <= 0:
            raise ValueError
        
        conn = sqlite3.connect('users.db')
        cursor = conn.cursor()
        cursor.execute("UPDATE users SET gift_count = ? WHERE user_id = ?", (gift_count, user_id))
        if cursor.rowcount == 0:
            cursor.execute("INSERT INTO users (user_id, gift_count) VALUES (?, ?)", (user_id, gift_count))
        conn.commit()
        conn.close()
        
        await update.message.reply_text(
            f"üéÅ **–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–∞—Ä–∫–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!**\n\n"
            f"–ó–∞ —Ä–∞–∑ –±—É–¥–µ—Ç –ø–æ–∫—É–ø–∞—Ç—å—Å—è: {gift_count} –ø–æ–¥–∞—Ä–∫–æ–≤",
            parse_mode="Markdown"
        )
    except (ValueError, IndexError):
        await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /setgiftcount <—á–∏—Å–ª–æ>\n–ü—Ä–∏–º–µ—Ä: /setgiftcount 3")

# –°–ª—É–∂–µ–±–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–±—Ä–æ—Å–∞ –±–∞–ª–∞–Ω—Å–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–≥–∞)
async def resetbalance(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –±–∞–ª–∞–Ω—Å –¥–æ 0
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    cursor.execute("UPDATE users SET stars = 0 WHERE user_id = ?", (user_id,))
    conn.commit()
    conn.close()
    
    await update.message.reply_text(
        "‚úÖ **–ë–∞–ª–∞–Ω—Å —Å–±—Ä–æ—à–µ–Ω –¥–æ 0 –∑–≤–µ–∑–¥**\n\n"
        "üîß –ë–∞–≥ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –∑–≤–µ–∑–¥ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω!\n"
        "üí´ –¢–µ–ø–µ—Ä—å –∑–≤–µ–∑–¥—ã –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —Ä–µ–∞–ª—å–Ω–æ–π –æ–ø–ª–∞—Ç—ã",
        parse_mode="Markdown"
    )

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–≤–µ–∑–¥ –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
async def sendstars(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    
    try:
        if len(context.args) < 2:
            await update.message.reply_text(
                "üí´ **–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–≤–µ–∑–¥**\n\n"
                "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/sendstars <@username –∏–ª–∏ user_id> <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ>`\n\n"
                "–ü—Ä–∏–º–µ—Ä—ã:\n"
                "`/sendstars @username 100`\n"
                "`/sendstars 123456789 50`",
                parse_mode="Markdown"
            )
            return
            
        recipient = context.args[0]
        amount = int(context.args[1])
        
        if amount <= 0:
            raise ValueError
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
        settings = get_user_settings(user_id)
        if not settings or settings['stars'] < amount:
            await update.message.reply_text(
                f"‚ùå **–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤–µ–∑–¥**\n\n"
                f"–ù—É–∂–Ω–æ: {amount} –∑–≤–µ–∑–¥\n"
                f"–£ –≤–∞—Å: {settings['stars'] if settings else 0} –∑–≤–µ–∑–¥",
                parse_mode="Markdown"
            )
            return
        
        # –°–æ–∑–¥–∞–µ–º —á–µ–∫ –∏ —Å—Ä–∞–∑—É –ø–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É
        check_id, result = create_star_check(user_id, amount, to_username=recipient.replace('@', ''))
        
        if check_id:
            bot_username = context.bot.username or "YourBotName"
            
            await update.message.reply_text(
                f"‚úÖ **–ó–≤–µ–∑–¥—ã –≥–æ—Ç–æ–≤—ã –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ!**\n\n"
                f"üí´ –°—É–º–º–∞: {amount} –∑–≤–µ–∑–¥\n"
                f"üë§ –ü–æ–ª—É—á–∞—Ç–µ–ª—å: {recipient}\n\n"
                f"üîó **–°—Å—ã–ª–∫–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è:**\n"
                f"`https://t.me/{bot_username}?start=check_{check_id}`\n\n"
                f"üì§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {recipient}\n"
                f"üí° –ö–∞–∫ —Ç–æ–ª—å–∫–æ –æ–Ω –Ω–∞–∂–º–µ—Ç –Ω–∞ —Å—Å—ã–ª–∫—É, –∑–≤–µ–∑–¥—ã –±—É–¥—É—Ç –ø–µ—Ä–µ–¥–∞–Ω—ã!",
                parse_mode="Markdown"
            )
        else:
            await update.message.reply_text(
                f"‚ùå **–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞:**\n{result}",
                parse_mode="Markdown"
            )
            
    except (ValueError, IndexError):
        await update.message.reply_text(
            "‚ùå **–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç**\n\n"
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/sendstars <@username> <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ>`\n"
            "–ü—Ä–∏–º–µ—Ä: `/sendstars @friend 100`",
            parse_mode="Markdown"
        )

# –ó–∞–ø—É—Å–∫
init_db()
app = ApplicationBuilder().token(TOKEN).build()

# –û—Å–Ω–æ–≤–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
app.add_handler(CommandHandler("start", start))
app.add_handler(CommandHandler("menu", menu))
app.add_handler(CallbackQueryHandler(button_handler))
app.add_handler(CommandHandler("addstars", addstars))
app.add_handler(CommandHandler("buygift", buygift))
app.add_handler(CommandHandler("balance", balance))
app.add_handler(CommandHandler("gifts", gifts))
app.add_handler(CommandHandler("autobuy", autobuy))
app.add_handler(CommandHandler("stopautobuy", stopautobuy))
app.add_handler(CommandHandler("stats", stats))

# –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
app.add_handler(CommandHandler("setmaxstars", setmaxstars))
app.add_handler(CommandHandler("setpricerange", setpricerange))
app.add_handler(CommandHandler("setsupply", setsupply))
app.add_handler(CommandHandler("setcycles", setcycles))
app.add_handler(CommandHandler("setgiftcount", setgiftcount))
app.add_handler(CommandHandler("resetbalance", resetbalance))
app.add_handler(CommandHandler("sendstars", sendstars))

# –ù–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text_message))
app.add_handler(MessageHandler(filters.SUCCESSFUL_PAYMENT, successful_payment))

print("üöÄ StarBot –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
app.run_polling()


