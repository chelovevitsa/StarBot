from telegram import Update, ReplyKeyboardRemove
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes,
    ConversationHandler, filters
)
import sqlite3

TOKEN = "8183658865:AAHQjtIJWA8d_yk7cPceKFZ2f8x1riijxH0"

# –®–∞–≥–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
GIFT_COUNT, MAX_PRICE, RELEASED = range(3)

# –°–æ–∑–¥–∞—ë–º –ë–î
def init_db():
    conn = sqlite3.connect("users.db")
    cursor = conn.cursor()
    cursor.execute("""
    CREATE TABLE IF NOT EXISTS users (
        user_id INTEGER PRIMARY KEY,
        gift_count INTEGER,
        max_price INTEGER,
        released_thousands INTEGER,
        stars INTEGER DEFAULT 0,
        want_to_buy INTEGER DEFAULT 0
    )
    """)
    conn.commit()
    conn.close()

# –°—Ç–∞—Ä—Ç
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –≤—ã–±—Ä–∞—Ç—å –ø–æ–¥–∞—Ä–∫–∏.\n\nüéÅ –°–∫–æ–ª—å–∫–æ –ø–æ–¥–∞—Ä–∫–æ–≤ —Ç—ã —Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∏—Ç—å?\n\nüí´ –¢–∞–∫–∂–µ –¥–æ—Å—Ç—É–ø–Ω—ã –∫–æ–º–∞–Ω–¥—ã:\n/addstars <—á–∏—Å–ª–æ> - –¥–æ–±–∞–≤–∏—Ç—å –∑–≤—ë–∑–¥—ã\n/buygift - –∫—É–ø–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫"
    )
    return GIFT_COUNT

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–≤—ë–∑–¥
async def addstars(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    try:
        stars = int(context.args[0]) if context.args else 0
        if stars <= 0:
            raise ValueError
        
        conn = sqlite3.connect('users.db')
        cursor = conn.cursor()
        cursor.execute("INSERT OR IGNORE INTO users(user_id, stars) VALUES (?,0)", (user_id,))
        cursor.execute("UPDATE users SET stars = stars + ? WHERE user_id = ?", (stars, user_id))
        cursor.execute("SELECT stars FROM users WHERE user_id = ?", (user_id,))
        total_stars = cursor.fetchone()[0]
        conn.commit()
        conn.close()
        
        await update.message.reply_text(f"‚ú® –î–æ–±–∞–≤–ª–µ–Ω–æ {stars} –∑–≤—ë–∑–¥!\nüí´ –í—Å–µ–≥–æ —É –≤–∞—Å: {total_stars} –∑–≤—ë–∑–¥\n\nüéÅ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /buygift –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –ø–æ–¥–∞—Ä–∫–∞")
    except (ValueError, IndexError):
        await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /addstars <—á–∏—Å–ª–æ>\n–ü—Ä–∏–º–µ—Ä: /addstars 100")

# –ü–æ–∫—É–ø–∫–∞ –ø–æ–¥–∞—Ä–∫–∞
async def buygift(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    cursor.execute("SELECT stars, gift_count, max_price, released_thousands FROM users WHERE user_id = ?", (user_id,))
    row = cursor.fetchone()
    
    if not row:
        conn.close()
        await update.message.reply_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∞—Ä–∫–æ–≤ –∫–æ–º–∞–Ω–¥–æ–π /start")
        return
        
    stars, gift_count, max_price, released_thousands = row
    
    if stars <= 0:
        conn.close()
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∑–≤—ë–∑–¥ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –ø–æ–¥–∞—Ä–∫–∞.\nüí´ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /addstars <—á–∏—Å–ª–æ> –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–≤—ë–∑–¥")
        return
    
    if not gift_count or not max_price:
        conn.close()
        await update.message.reply_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∞—Ä–∫–æ–≤ –∫–æ–º–∞–Ω–¥–æ–π /start")
        return
    
    # –ü–æ–º–µ—á–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–∫—É–ø–∫—É –≤ –±–∞–∑–µ (—á—Ç–æ–±—ã userbot —É–≤–∏–¥–µ–ª)
    cursor.execute("UPDATE users SET want_to_buy = 1 WHERE user_id = ?", (user_id,))
    conn.commit()
    conn.close()
    
    await update.message.reply_text(f"üéÅ –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–∫—É–ø–∫—É –ø—Ä–∏–Ω—è—Ç!\n\nüìã –í–∞—à–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\nüéÅ –ü–æ–¥–∞—Ä–∫–æ–≤: {gift_count}\nüí∞ –ë—é–¥–∂–µ—Ç: {max_price}‚ÇΩ –∑–∞ –ø–æ–¥–∞—Ä–æ–∫\nüì¶ –í—ã–ø—É—â–µ–Ω–æ: {released_thousands * 1000 if released_thousands else 0} —à—Ç—É–∫\nüí´ –ó–≤—ë–∑–¥: {stars}\n\n‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ...")

# –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–∞—Ä–∫–æ–≤
async def get_gift_count(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        count = int(update.message.text)
        if count <= 0:
            raise ValueError
        context.user_data['gift_count'] = count
        await update.message.reply_text("üí∞ –ö–∞–∫–æ–π –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –±—é–¥–∂–µ—Ç –Ω–∞ *–æ–¥–∏–Ω* –ø–æ–¥–∞—Ä–æ–∫? (–≤ —Ä—É–±–ª—è—Ö)", parse_mode="Markdown")
        return MAX_PRICE
    except ValueError:
        await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 3")
        return GIFT_COUNT

# –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞
async def get_max_price(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        price = int(update.message.text)
        if price <= 0:
            raise ValueError
        context.user_data['max_price'] = price
        await update.message.reply_text("üéâ –°–∫–æ–ª—å–∫–æ —Ç—ã—Å—è—á –ø–æ–¥–∞—Ä–∫–æ–≤ —É–∂–µ –≤—ã–ø—É—â–µ–Ω–æ? (–Ω–∞–ø—Ä–∏–º–µ—Ä: 20)")
        return RELEASED
    except ValueError:
        await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 500")
        return MAX_PRICE

# –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø—É—â–µ–Ω–Ω—ã—Ö
async def get_released(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        released = int(update.message.text)
        if released < 0:
            raise ValueError

        user_id = update.message.from_user.id
        gift_count = context.user_data['gift_count']
        max_price = context.user_data['max_price']

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
        conn = sqlite3.connect("users.db")
        cursor = conn.cursor()
        cursor.execute("""
            INSERT OR REPLACE INTO users (user_id, gift_count, max_price, released_thousands)
            VALUES (?, ?, ?, ?)
        """, (user_id, gift_count, max_price, released))
        conn.commit()
        conn.close()

        await update.message.reply_text(
            f"‚úÖ –í—Å—ë —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!\n\nüéÅ –ü–æ–¥–∞—Ä–∫–æ–≤: {gift_count}\nüí∏ –ë—é–¥–∂–µ—Ç –Ω–∞ 1: {max_price}‚ÇΩ\nüì¶ –í—ã–ø—É—â–µ–Ω–æ: {released * 1000} —à—Ç—É–∫\n\n–û–∂–∏–¥–∞–π—Ç–µ ‚Äî –ø–æ–¥–±–µ—Ä—É –ª—É—á—à–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã üéØ",
            reply_markup=ReplyKeyboardRemove()
        )
        return ConversationHandler.END

    except ValueError:
        await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 20")
        return RELEASED

# /cancel
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üö´ –û—Ç–º–µ–Ω–µ–Ω–æ. –ù–∞—á–Ω–∏ –∑–∞–Ω–æ–≤–æ ‚Äî /start", reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END

# –ó–∞–ø—É—Å–∫
init_db()
app = ApplicationBuilder().token(TOKEN).build()

conv_handler = ConversationHandler(
    entry_points=[CommandHandler("start", start)],
    states={
        GIFT_COUNT: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_gift_count)],
        MAX_PRICE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_max_price)],
        RELEASED: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_released)],
    },
    fallbacks=[CommandHandler("cancel", cancel)],
)

app.add_handler(conv_handler)
app.add_handler(CommandHandler("addstars", addstars))
app.add_handler(CommandHandler("buygift", buygift))

print("üöÄ Bot is running...")
app.run_polling()


