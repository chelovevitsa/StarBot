from telegram import Update, ReplyKeyboardRemove, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes,
    ConversationHandler, filters, CallbackQueryHandler
)
import sqlite3
from db import init_db, add_stars, get_user_settings, get_suitable_gifts, enable_auto_buy, disable_auto_buy, get_purchase_stats

TOKEN = "8183658865:AAHQjtIJWA8d_yk7cPceKFZ2f8x1riijxH0"

# –®–∞–≥–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
GIFT_COUNT, MAX_PRICE, RELEASED = range(3)

# –°—Ç–∞—Ä—Ç
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üéÅ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–æ–¥–∞—Ä–∫–∏", callback_data='setup_gifts')],
        [InlineKeyboardButton("üí´ –ú–æ–π –±–∞–ª–∞–Ω—Å", callback_data='check_balance')],
        [InlineKeyboardButton("ü§ñ –ê–≤—Ç–æ–ø–æ–∫—É–ø–∫–∞", callback_data='auto_buy_settings')],
        [InlineKeyboardButton("üìä –ò—Å—Ç–æ—Ä–∏—è –ø–æ–∫—É–ø–æ–∫", callback_data='purchase_history')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à –ª–∏—á–Ω—ã–π –±–æ—Ç –¥–ª—è –∞–≤—Ç–æ–ø–æ–∫—É–ø–∫–∏ Telegram –ø–æ–¥–∞—Ä–∫–æ–≤!\n\n"
        "‚òÅÔ∏è **–†–∞–±–æ—Ç–∞—é 24/7 –Ω–∞ Fly.io - –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –≤–∞—à–µ–≥–æ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞!**\n\n"
        "üéÅ –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∞—Ä–∫–æ–≤\n"
        "üí´ –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –∑–≤–µ–∑–¥\n"
        "ü§ñ –í–∫–ª—é—á–∏—Ç–µ –∞–≤—Ç–æ–ø–æ–∫—É–ø–∫—É –Ω–æ–≤—ã—Ö –ø–æ–¥–∞—Ä–∫–æ–≤\n"
        "üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø–æ–∫—É–ø–∫–∏\n\n"
        "üí° –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/addstars <—á–∏—Å–ª–æ> - –¥–æ–±–∞–≤–∏—Ç—å –∑–≤–µ–∑–¥—ã\n"
        "/buygift - –∫—É–ø–∏—Ç—å –ø–æ–¥–∞—Ä–∫–∏ —Å–µ–π—á–∞—Å\n"
        "/autobuy - –≤–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–ø–æ–∫—É–ø–∫—É\n"
        "/stopautobuy - –≤—ã–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–ø–æ–∫—É–ø–∫—É\n"
        "/balance - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å\n"
        "/stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∫—É–ø–æ–∫",
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    await query.answer()

    if query.data == 'setup_gifts':
        await query.edit_message_text(
            "üéÅ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥–∞—Ä–∫–æ–≤\n\n"
            "–°–∫–æ–ª—å–∫–æ –ø–æ–¥–∞—Ä–∫–æ–≤ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –∑–∞ —Ä–∞–∑?"
        )
        return GIFT_COUNT
    
    elif query.data == 'check_balance':
        settings = get_user_settings(user_id)
        if settings:
            balance_text = f"üí´ –í–∞—à –±–∞–ª–∞–Ω—Å: **{settings['stars']} –∑–≤–µ–∑–¥**\n\n"
            balance_text += f"‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:\n"
            balance_text += f"üéÅ –ü–æ–¥–∞—Ä–∫–æ–≤ –∑–∞ —Ä–∞–∑: {settings['gift_count']}\n"
            balance_text += f"üí∞ –ú–∞–∫—Å. —Ü–µ–Ω–∞: {settings['max_price']}‚ÇΩ\n"
            balance_text += f"üì¶ –õ–∏–º–∏—Ç –≤—ã–ø—É—Å–∫–∞: {settings['released_thousands']}k\n"
            balance_text += f"ü§ñ –ê–≤—Ç–æ–ø–æ–∫—É–ø–∫–∞: {'üü¢ –í–ö–õ' if settings['auto_buy'] else 'üî¥ –í–´–ö–õ'}\n"
            balance_text += f"‚ö° –ù–æ–≤—ã–µ –ø–æ–¥–∞—Ä–∫–∏: {'üü¢ –í–ö–õ' if settings['auto_buy_new_gifts'] else 'üî¥ –í–´–ö–õ'}\n"
            balance_text += f"üíé –ú–∞–∫—Å. –∑–≤–µ–∑–¥ –∑–∞ –ø–æ–¥–∞—Ä–æ–∫: {settings['max_stars_per_gift']}"
        else:
            balance_text = "‚ùå –°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∞—Ä–∫–æ–≤!"
            
        await query.edit_message_text(balance_text, parse_mode="Markdown")
        
    elif query.data == 'auto_buy_settings':
        settings = get_user_settings(user_id)
        auto_status = "üü¢ –í–ö–õ–Æ–ß–ï–ù–ê" if settings and settings['auto_buy'] else "üî¥ –í–´–ö–õ–Æ–ß–ï–ù–ê"
        new_gifts_status = "üü¢ –í–ö–õ" if settings and settings['auto_buy_new_gifts'] else "üî¥ –í–´–ö–õ"
        
        keyboard = [
            [InlineKeyboardButton("üü¢ –í–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–ø–æ–∫—É–ø–∫—É", callback_data='enable_auto')],
            [InlineKeyboardButton("üî¥ –í—ã–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–ø–æ–∫—É–ø–∫—É", callback_data='disable_auto')],
            [InlineKeyboardButton("‚ö° –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –Ω–æ–≤—ã–µ –ø–æ–¥–∞—Ä–∫–∏", callback_data='setup_new_gifts')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            f"ü§ñ **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–ø–æ–∫—É–ø–∫–∏**\n\n"
            f"–°—Ç–∞—Ç—É—Å: {auto_status}\n"
            f"–ù–æ–≤—ã–µ –ø–æ–¥–∞—Ä–∫–∏: {new_gifts_status}\n\n"
            f"üí° **–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç:**\n"
            f"‚Ä¢ –ë–æ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç –Ω–æ–≤—ã–µ –ø–æ–¥–∞—Ä–∫–∏ –≤ Telegram\n"
            f"‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–∫—É–ø–∞–µ—Ç –∏—Ö –ø—Ä–∏ –ø–æ—è–≤–ª–µ–Ω–∏–∏\n"
            f"‚Ä¢ –£—á–∏—Ç—ã–≤–∞–µ—Ç –≤–∞—à–∏ –ª–∏–º–∏—Ç—ã –ø–æ —Ü–µ–Ω–µ –∏ –∑–≤–µ–∑–¥–∞–º\n"
            f"‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–∫—É–ø–∫–∞—Ö",
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )
        
    elif query.data == 'enable_auto':
        enable_auto_buy(user_id, enable_new_gifts=True, max_stars_per_gift=50)
        await query.edit_message_text(
            "üü¢ **–ê–≤—Ç–æ–ø–æ–∫—É–ø–∫–∞ –í–ö–õ–Æ–ß–ï–ù–ê!**\n\n"
            "‚ö° –ê–≤—Ç–æ–ø–æ–∫—É–ø–∫–∞ –Ω–æ–≤—ã—Ö –ø–æ–¥–∞—Ä–∫–æ–≤: –í–ö–õ\n"
            "üíé –ú–∞–∫—Å. –∑–≤–µ–∑–¥ –∑–∞ –ø–æ–¥–∞—Ä–æ–∫: 50\n\n"
            "ü§ñ –ë–æ—Ç –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–∫—É–ø–∞—Ç—å –Ω–æ–≤—ã–µ –ø–æ–¥–∞—Ä–∫–∏ –ø—Ä–∏ –∏—Ö –ø–æ—è–≤–ª–µ–Ω–∏–∏ –≤ Telegram!",
            parse_mode="Markdown"
        )
        
    elif query.data == 'disable_auto':
        disable_auto_buy(user_id)
        await query.edit_message_text(
            "üî¥ **–ê–≤—Ç–æ–ø–æ–∫—É–ø–∫–∞ –í–´–ö–õ–Æ–ß–ï–ù–ê**\n\n"
            "–ë–æ—Ç –±–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–∫—É–ø–∞—Ç—å –ø–æ–¥–∞—Ä–∫–∏.",
            parse_mode="Markdown"
        )
        
    elif query.data == 'purchase_history':
        history, stats = get_purchase_stats(user_id, limit=10)
        
        if history:
            history_text = f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∫—É–ø–æ–∫:**\n"
            history_text += f"üéÅ –í—Å–µ–≥–æ –∫—É–ø–ª–µ–Ω–æ: {stats[0]} –ø–æ–¥–∞—Ä–∫–æ–≤\n"
            history_text += f"üí´ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ –∑–≤–µ–∑–¥: {stats[1]}\n"
            history_text += f"ü§ñ –ê–≤—Ç–æ–ø–æ–∫—É–ø–æ–∫: {stats[2]}\n\n"
            history_text += f"**–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏:**\n"
            
            for gift_name, stars_spent, date, status, auto in history[:5]:
                status_emoji = "‚úÖ" if status == "success" else "‚ùå"
                auto_emoji = "ü§ñ" if auto else "üë§"
                history_text += f"{status_emoji}{auto_emoji} {gift_name} - {stars_spent}‚≠ê\n"
        else:
            history_text = "üìä –ò—Å—Ç–æ—Ä–∏—è –ø–æ–∫—É–ø–æ–∫ –ø—É—Å—Ç–∞"
            
        await query.edit_message_text(history_text, parse_mode="Markdown")

# –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–∞—Ä–∫–æ–≤
async def get_gift_count(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        count = int(update.message.text)
        if count <= 0:
            raise ValueError
        context.user_data['gift_count'] = count
        await update.message.reply_text("üí∞ –ö–∞–∫–æ–π –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –±—é–¥–∂–µ—Ç –Ω–∞ *–æ–¥–∏–Ω* –ø–æ–¥–∞—Ä–æ–∫? (–≤ —Ä—É–±–ª—è—Ö)", parse_mode="Markdown")
        return MAX_PRICE
    except ValueError:
        await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 3")
        return GIFT_COUNT

# –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞
async def get_max_price(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        price = int(update.message.text)
        if price <= 0:
            raise ValueError
        context.user_data['max_price'] = price
        await update.message.reply_text("üéâ –õ–∏–º–∏—Ç –≤—ã–ø—É—â–µ–Ω–Ω—ã—Ö –ø–æ–¥–∞—Ä–∫–æ–≤ (–≤ —Ç—ã—Å—è—á–∞—Ö)? (–Ω–∞–ø—Ä–∏–º–µ—Ä: 50)")
        return RELEASED
    except ValueError:
        await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 500")
        return MAX_PRICE

# –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø—É—â–µ–Ω–Ω—ã—Ö
async def get_released(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        released = int(update.message.text)
        if released < 0:
            raise ValueError

        user_id = update.message.from_user.id
        gift_count = context.user_data['gift_count']
        max_price = context.user_data['max_price']

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
        conn = sqlite3.connect("users.db")
        cursor = conn.cursor()
        cursor.execute("""
            INSERT OR REPLACE INTO users (user_id, gift_count, max_price, released_thousands)
            VALUES (?, ?, ?, ?)
        """, (user_id, gift_count, max_price, released))
        conn.commit()
        conn.close()

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –ø–æ–¥–∞—Ä–∫–∏
        suitable_gifts = get_suitable_gifts(max_price, released * 1000)
        
        gift_list = ""
        for name, stars, price, total, emoji in suitable_gifts[:5]:
            gift_list += f"{emoji} {name} - {stars}‚≠ê ({price}‚ÇΩ)\n"

        await update.message.reply_text(
            f"‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!\n\n"
            f"üéÅ –ü–æ–¥–∞—Ä–∫–æ–≤ –∑–∞ —Ä–∞–∑: {gift_count}\n"
            f"üí∏ –ë—é–¥–∂–µ—Ç –Ω–∞ 1: {max_price}‚ÇΩ\n"
            f"üì¶ –õ–∏–º–∏—Ç –≤—ã–ø—É—Å–∫–∞: {released}k\n\n"
            f"üéØ –ü–æ–¥—Ö–æ–¥—è—â–∏–µ –ø–æ–¥–∞—Ä–∫–∏:\n{gift_list}\n"
            f"üí´ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /addstars –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞\n"
            f"üéÅ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /buygift –¥–ª—è –ø–æ–∫—É–ø–∫–∏",
            reply_markup=ReplyKeyboardRemove()
        )
        return ConversationHandler.END

    except ValueError:
        await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 50")
        return RELEASED

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–≤—ë–∑–¥
async def addstars(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    try:
        stars = int(context.args[0]) if context.args else 0
        if stars <= 0:
            raise ValueError
        
        total_stars = add_stars(user_id, stars)
        
        await update.message.reply_text(
            f"‚ú® –î–æ–±–∞–≤–ª–µ–Ω–æ {stars} –∑–≤–µ–∑–¥!\n"
            f"üí´ –í—Å–µ–≥–æ —É –≤–∞—Å: {total_stars} –∑–≤–µ–∑–¥\n\n"
            f"üéÅ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /buygift –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –ø–æ–¥–∞—Ä–∫–æ–≤"
        )
    except (ValueError, IndexError):
        await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /addstars <—á–∏—Å–ª–æ>\n–ü—Ä–∏–º–µ—Ä: /addstars 100")

# –ü–æ–∫—É–ø–∫–∞ –ø–æ–¥–∞—Ä–∫–∞
async def buygift(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    settings = get_user_settings(user_id)
    
    if not settings:
        await update.message.reply_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∞—Ä–∫–æ–≤ –∫–æ–º–∞–Ω–¥–æ–π /start")
        return
        
    if settings['stars'] <= 0:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∑–≤–µ–∑–¥ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –ø–æ–¥–∞—Ä–∫–∞.\nüí´ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /addstars <—á–∏—Å–ª–æ>")
        return
    
    # –ü–æ–º–µ—á–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–∫—É–ø–∫—É –≤ –±–∞–∑–µ
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    cursor.execute("UPDATE users SET want_to_buy = 1 WHERE user_id = ?", (user_id,))
    conn.commit()
    conn.close()
    
    await update.message.reply_text(
        f"üéÅ –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–∫—É–ø–∫—É –ø—Ä–∏–Ω—è—Ç!\n\n"
        f"üìã –í–∞—à–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n"
        f"üéÅ –ü–æ–¥–∞—Ä–∫–æ–≤: {settings['gift_count']}\n"
        f"üí∞ –ë—é–¥–∂–µ—Ç: {settings['max_price']}‚ÇΩ –∑–∞ –ø–æ–¥–∞—Ä–æ–∫\n"
        f"üí´ –ó–≤–µ–∑–¥: {settings['stars']}\n\n"
        f"‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫–∞–∑–∞..."
    )

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞
async def balance(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    settings = get_user_settings(user_id)
    
    if settings:
        await update.message.reply_text(
            f"üí´ –í–∞—à –±–∞–ª–∞–Ω—Å: {settings['stars']} –∑–≤–µ–∑–¥\n\n"
            f"‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:\n"
            f"üéÅ –ü–æ–¥–∞—Ä–∫–æ–≤ –∑–∞ —Ä–∞–∑: {settings['gift_count']}\n"
            f"üí∞ –ú–∞–∫—Å. —Ü–µ–Ω–∞: {settings['max_price']}‚ÇΩ\n"
            f"üì¶ –õ–∏–º–∏—Ç –≤—ã–ø—É—Å–∫–∞: {settings['released_thousands']}k"
        )
    else:
        await update.message.reply_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∞—Ä–∫–æ–≤ –∫–æ–º–∞–Ω–¥–æ–π /start")

# –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–¥–∞—Ä–∫–∏
async def gifts(update: Update, context: ContextTypes.DEFAULT_TYPE):
    conn = sqlite3.connect('users.db')
    c = conn.cursor()
    c.execute('SELECT name, price_stars, price_rubles, emoji FROM available_gifts WHERE is_active = 1')
    gifts = c.fetchall()
    conn.close()
    
    gifts_text = "üéÅ –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–¥–∞—Ä–∫–∏:\n\n"
    for name, stars, rubles, emoji in gifts:
        gifts_text += f"{emoji} {name} - {stars}‚≠ê ({rubles}‚ÇΩ)\n"
        
    await update.message.reply_text(gifts_text)

# /cancel
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üö´ –û—Ç–º–µ–Ω–µ–Ω–æ. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ ‚Äî /start", reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END

# –ê–≤—Ç–æ–ø–æ–∫—É–ø–∫–∞ –∫–æ–º–∞–Ω–¥—ã
async def autobuy(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã
    if context.args:
        try:
            max_stars = int(context.args[0])
            if max_stars <= 0:
                raise ValueError
        except ValueError:
            await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /autobuy [–º–∞–∫—Å_–∑–≤–µ–∑–¥_–∑–∞_–ø–æ–¥–∞—Ä–æ–∫]\n–ü—Ä–∏–º–µ—Ä: /autobuy 25")
            return
    else:
        max_stars = 50  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
    
    settings = get_user_settings(user_id)
    if not settings:
        await update.message.reply_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∞—Ä–∫–æ–≤ –∫–æ–º–∞–Ω–¥–æ–π /start")
        return
        
    if settings['stars'] <= 0:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∑–≤–µ–∑–¥. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /addstars <—á–∏—Å–ª–æ>")
        return
    
    enable_auto_buy(user_id, enable_new_gifts=True, max_stars_per_gift=max_stars)
    
    await update.message.reply_text(
        f"üü¢ **–ê–≤—Ç–æ–ø–æ–∫—É–ø–∫–∞ –í–ö–õ–Æ–ß–ï–ù–ê!**\n\n"
        f"‚ö° –ê–≤—Ç–æ–ø–æ–∫—É–ø–∫–∞ –Ω–æ–≤—ã—Ö –ø–æ–¥–∞—Ä–∫–æ–≤: –í–ö–õ\n"
        f"üíé –ú–∞–∫—Å. –∑–≤–µ–∑–¥ –∑–∞ –ø–æ–¥–∞—Ä–æ–∫: {max_stars}\n"
        f"üí´ –í–∞—à –±–∞–ª–∞–Ω—Å: {settings['stars']} –∑–≤–µ–∑–¥\n\n"
        f"ü§ñ –ë–æ—Ç –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–∫—É–ø–∞—Ç—å –Ω–æ–≤—ã–µ Telegram –ø–æ–¥–∞—Ä–∫–∏ –ø—Ä–∏ –∏—Ö –ø–æ—è–≤–ª–µ–Ω–∏–∏!",
        parse_mode="Markdown"
    )

async def stopautobuy(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    disable_auto_buy(user_id)
    
    await update.message.reply_text(
        "üî¥ **–ê–≤—Ç–æ–ø–æ–∫—É–ø–∫–∞ –í–´–ö–õ–Æ–ß–ï–ù–ê**\n\n"
        "–ë–æ—Ç –±–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–∫—É–ø–∞—Ç—å –ø–æ–¥–∞—Ä–∫–∏.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /autobuy –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤–∫–ª—é—á–µ–Ω–∏—è.",
        parse_mode="Markdown"
    )

async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    history, stats = get_purchase_stats(user_id, limit=20)
    
    if not history:
        await update.message.reply_text("üìä –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–∫—É–ø–æ–∫")
        return
    
    stats_text = f"üìä **–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n\n"
    stats_text += f"üéÅ –í—Å–µ–≥–æ –∫—É–ø–ª–µ–Ω–æ: **{stats[0]}** –ø–æ–¥–∞—Ä–∫–æ–≤\n"
    stats_text += f"üí´ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ –∑–≤–µ–∑–¥: **{stats[1]}**\n"
    stats_text += f"ü§ñ –ê–≤—Ç–æ–ø–æ–∫—É–ø–æ–∫: **{stats[2]}**\n"
    stats_text += f"üë§ –†—É—á–Ω—ã—Ö –ø–æ–∫—É–ø–æ–∫: **{stats[0] - stats[2]}**\n\n"
    
    if len(history) > 0:
        stats_text += f"**–ü–æ—Å–ª–µ–¥–Ω–∏–µ {min(10, len(history))} –ø–æ–∫—É–ø–æ–∫:**\n"
        for gift_name, stars_spent, date, status, auto in history[:10]:
            status_emoji = "‚úÖ" if status == "success" else "‚ùå"
            auto_emoji = "ü§ñ" if auto else "üë§"
            stats_text += f"{status_emoji}{auto_emoji} {gift_name} - {stars_spent}‚≠ê\n"
    
    await update.message.reply_text(stats_text, parse_mode="Markdown")

# –ó–∞–ø—É—Å–∫
init_db()
app = ApplicationBuilder().token(TOKEN).build()

conv_handler = ConversationHandler(
    entry_points=[CommandHandler("start", start)],
    states={
        GIFT_COUNT: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_gift_count)],
        MAX_PRICE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_max_price)],
        RELEASED: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_released)],
    },
    fallbacks=[CommandHandler("cancel", cancel)],
)

app.add_handler(conv_handler)
app.add_handler(CallbackQueryHandler(button_handler))
app.add_handler(CommandHandler("addstars", addstars))
app.add_handler(CommandHandler("buygift", buygift))
app.add_handler(CommandHandler("balance", balance))
app.add_handler(CommandHandler("gifts", gifts))
app.add_handler(CommandHandler("autobuy", autobuy))
app.add_handler(CommandHandler("stopautobuy", stopautobuy))
app.add_handler(CommandHandler("stats", stats))

print("üöÄ StarBot –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
app.run_polling()


