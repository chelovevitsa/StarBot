from telethon import TelegramClient
from telethon.tl.functions.messages import SendMediaRequest, GetAvailableGiftsRequest
from telethon.tl.functions.payments import SendStarsFormRequest, GetStarsGiftsRequest
from telethon.tl.types import InputMediaGift, MessageMediaGift
import sqlite3
import asyncio
import json
import time
from db import log_purchase, spend_stars

# –î–∞–Ω–Ω—ã–µ Telegram API
api_id = 23355959
api_hash = 'b1f4e47d212838b44762a1c3b04fe37f'
phone = '+48795405315'

client = TelegramClient("user_session", api_id, api_hash)

class TelegramGiftMonitor:
    def __init__(self):
        self.known_gifts = set()
        self.last_check = 0
        
    async def get_available_gifts(self):
        """–ü–æ–ª—É—á–∞–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –∫–∞—Ç–∞–ª–æ–≥ –ø–æ–¥–∞—Ä–∫–æ–≤ –æ—Ç Telegram"""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º Telegram API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–¥–∞—Ä–∫–æ–≤
            result = await client(GetStarsGiftsRequest())
            
            gifts = []
            for gift in result.gifts:
                gift_info = {
                    'id': gift.id,
                    'name': gift.title,
                    'stars_cost': gift.stars,
                    'total_count': gift.total_count,
                    'sold_count': gift.sold_count,
                    'first_sale_date': gift.first_sale_date,
                    'last_sale_date': gift.last_sale_date,
                    'sticker': gift.sticker,
                    'limited': gift.limited,
                    'remaining': gift.total_count - gift.sold_count if gift.limited else None
                }
                gifts.append(gift_info)
                
            return gifts
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–∞–ª–æ–≥–∞ –ø–æ–¥–∞—Ä–∫–æ–≤: {e}")
            return []
    
    async def check_for_new_gifts(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ—è–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –ø–æ–¥–∞—Ä–∫–æ–≤"""
        try:
            current_gifts = await self.get_available_gifts()
            new_gifts = []
            
            for gift in current_gifts:
                gift_id = gift['id']
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–æ–≤—ã–π –ª–∏ —ç—Ç–æ –ø–æ–¥–∞—Ä–æ–∫
                if gift_id not in self.known_gifts:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–¥–∞—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –Ω–æ–≤—ã–π (–ø–æ—è–≤–∏–ª—Å—è –Ω–µ–¥–∞–≤–Ω–æ)
                    if gift['first_sale_date'] and time.time() - gift['first_sale_date'] < 3600:  # –í —Ç–µ—á–µ–Ω–∏–µ —á–∞—Å–∞
                        new_gifts.append(gift)
                    
                    self.known_gifts.add(gift_id)
            
            return new_gifts
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤—ã—Ö –ø–æ–¥–∞—Ä–∫–æ–≤: {e}")
            return []
    
    async def update_gift_catalog(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∫–∞—Ç–∞–ª–æ–≥ –ø–æ–¥–∞—Ä–∫–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            gifts = await self.get_available_gifts()
            
            conn = sqlite3.connect('users.db')
            c = conn.cursor()
            
            # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–π –∫–∞—Ç–∞–ª–æ–≥
            c.execute('DELETE FROM available_gifts WHERE source = "telegram"')
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –ø–æ–¥–∞—Ä–∫–∏
            for gift in gifts:
                c.execute('''
                    INSERT INTO available_gifts 
                    (telegram_id, name, price_stars, total_released, sold_count, 
                     remaining, limited, sticker_id, source, is_active)
                    VALUES (?, ?, ?, ?, ?, ?, ?, ?, "telegram", 1)
                ''', (
                    gift['id'], gift['name'], gift['stars_cost'], 
                    gift['total_count'], gift['sold_count'], gift['remaining'],
                    gift['limited'], str(gift['sticker']), 
                ))
            
            conn.commit()
            conn.close()
            
            print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω –∫–∞—Ç–∞–ª–æ–≥: {len(gifts)} –ø–æ–¥–∞—Ä–∫–æ–≤")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞—Ç–∞–ª–æ–≥–∞: {e}")
            return False

async def send_real_telegram_gift(recipient_user_id, gift_id, stars_cost):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞—Å—Ç–æ—è—â–∏–π Telegram –ø–æ–¥–∞—Ä–æ–∫"""
    try:
        # –°–æ–∑–¥–∞–µ–º –º–µ–¥–∏–∞ –¥–ª—è –ø–æ–¥–∞—Ä–∫–∞
        gift_media = InputMediaGift(
            gift_id=gift_id,
            stars=stars_cost
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥–∞—Ä–æ–∫
        result = await client(SendMediaRequest(
            peer=recipient_user_id,
            media=gift_media,
            message="üéÅ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫—É–ø–ª–µ–Ω –¥–ª—è –≤–∞—Å!",
            random_id=int(time.time())
        ))
        
        print(f"‚úÖ Telegram –ø–æ–¥–∞—Ä–æ–∫ ID:{gift_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {recipient_user_id}")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram –ø–æ–¥–∞—Ä–∫–∞: {e}")
        return False

async def auto_buy_new_gifts(new_gifts):
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–∫—É–ø–∞–µ—Ç –Ω–æ–≤—ã–µ –ø–æ–¥–∞—Ä–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∞–≤—Ç–æ–ø–æ–∫—É–ø–∫–æ–π"""
    try:
        conn = sqlite3.connect('users.db')
        c = conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –≤–∫–ª—é—á–µ–Ω–Ω–æ–π –∞–≤—Ç–æ–ø–æ–∫—É–ø–∫–æ–π
        c.execute('''
            SELECT user_id, stars, gift_count, max_price, auto_buy_new_gifts, max_stars_per_gift 
            FROM users 
            WHERE auto_buy = 1 AND stars > 0 AND auto_buy_new_gifts = 1
        ''')
        auto_buyers = c.fetchall()
        
        for gift in new_gifts:
            gift_id = gift['id']
            gift_name = gift['name']
            stars_cost = gift['stars_cost']
            
            print(f"üéÅ –ù–û–í–´–ô –ü–û–î–ê–†–û–ö: {gift_name} –∑–∞ {stars_cost}‚≠ê")
            
            for user_id, user_stars, gift_count, max_price, auto_new, max_stars in auto_buyers:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥—Ö–æ–¥–∏—Ç –ª–∏ –ø–æ–¥–∞—Ä–æ–∫ –ø–æ–¥ –∫—Ä–∏—Ç–µ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                if stars_cost <= max_stars and user_stars >= stars_cost:
                    
                    print(f"üöÄ –ê–≤—Ç–æ–ø–æ–∫—É–ø–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {gift_name}")
                    
                    # –ü–æ–∫—É–ø–∞–µ–º –ø–æ–¥–∞—Ä–æ–∫
                    success = await send_real_telegram_gift(user_id, gift_id, stars_cost)
                    
                    if success:
                        # –°–ø–∏—Å—ã–≤–∞–µ–º –∑–≤–µ–∑–¥—ã
                        if spend_stars(user_id, stars_cost):
                            # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–∫—É–ø–∫—É
                            log_purchase(user_id, gift_name, 0, stars_cost, "self", "success")
                            
                            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                            await client.send_message(user_id, 
                                f"üéâ –ê–í–¢–û–ü–û–ö–£–ü–ö–ê!\n\n"
                                f"üéÅ –ù–æ–≤—ã–π –ø–æ–¥–∞—Ä–æ–∫: {gift_name}\n"
                                f"üí´ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: {stars_cost} –∑–≤–µ–∑–¥\n"
                                f"‚ö° –ö—É–ø–ª–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –ø–æ—è–≤–ª–µ–Ω–∏–∏!"
                            )
                            
                            print(f"‚úÖ –ê–≤—Ç–æ–ø–æ–∫—É–ø–∫–∞ —É—Å–ø–µ—à–Ω–∞ –¥–ª—è {user_id}")
                        else:
                            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–ø–∏—Å–∞—Ç—å –∑–≤–µ–∑–¥—ã —É {user_id}")
                    else:
                        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∫—É–ø–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫ –¥–ª—è {user_id}")
                        
                    # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–∫—É–ø–∫–∞–º–∏
                    await asyncio.sleep(2)
        
        conn.close()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–ø–æ–∫—É–ø–∫–∏ –Ω–æ–≤—ã—Ö –ø–æ–¥–∞—Ä–∫–æ–≤: {e}")

async def process_manual_orders():
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä—É—á–Ω—ã–µ –∑–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    try:
        conn = sqlite3.connect("users.db")
        cursor = conn.cursor()
        cursor.execute("""
            SELECT user_id, stars, gift_count, max_price, released_thousands 
            FROM users 
            WHERE want_to_buy = 1 AND stars > 0
        """)
        manual_orders = cursor.fetchall()

        for user_id, stars, gift_count, max_price, released_thousands in manual_orders:
            print(f"\nüéÅ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä—É—á–Ω–æ–π –∑–∞–∫–∞–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –ø–æ–¥–∞—Ä–∫–∏ –∏–∑ Telegram –∫–∞—Ç–∞–ª–æ–≥–∞
            cursor.execute('''
                SELECT telegram_id, name, price_stars, sticker_id 
                FROM available_gifts 
                WHERE price_stars <= ? AND source = "telegram" AND is_active = 1
                ORDER BY price_stars DESC
                LIMIT 10
            ''', (max_price,))
            suitable_gifts = cursor.fetchall()
            
            if not suitable_gifts:
                await client.send_message(user_id, "‚ùå –ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–æ–¥–∞—Ä–∫–æ–≤ –≤ –∫–∞—Ç–∞–ª–æ–≥–µ")
                cursor.execute("UPDATE users SET want_to_buy = 0 WHERE user_id = ?", (user_id,))
                continue
            
            successful_purchases = 0
            total_stars_spent = 0
            
            for i in range(min(gift_count, len(suitable_gifts))):
                gift_id, gift_name, stars_cost, sticker_id = suitable_gifts[i % len(suitable_gifts)]
                
                if stars >= stars_cost:
                    # –ü–æ–∫—É–ø–∞–µ–º –Ω–∞—Å—Ç–æ—è—â–∏–π Telegram –ø–æ–¥–∞—Ä–æ–∫
                    success = await send_real_telegram_gift(user_id, gift_id, stars_cost)
                    
                    if success:
                        spend_stars(user_id, stars_cost)
                        log_purchase(user_id, gift_name, 0, stars_cost, "self", "success")
                        
                        successful_purchases += 1
                        total_stars_spent += stars_cost
                        stars -= stars_cost
                        
                        print(f"‚úÖ –ü–æ–¥–∞—Ä–æ–∫ #{i+1} '{gift_name}' –∫—É–ø–ª–µ–Ω")
                        await asyncio.sleep(2)
                    else:
                        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏ –ø–æ–¥–∞—Ä–∫–∞ '{gift_name}'")
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
            if successful_purchases > 0:
                await client.send_message(user_id,
                    f"üéâ –ü–æ–∫—É–ø–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã!\n\n"
                    f"üéÅ –ö—É–ø–ª–µ–Ω–æ: {successful_purchases} –ø–æ–¥–∞—Ä–∫–æ–≤\n"
                    f"üí´ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: {total_stars_spent} –∑–≤–µ–∑–¥\n"
                    f"‚ú® –í—Å–µ –ø–æ–¥–∞—Ä–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!"
                )
            
            # –°–Ω–∏–º–∞–µ–º —Ñ–ª–∞–≥ –∑–∞–∫–∞–∑–∞
            cursor.execute("UPDATE users SET want_to_buy = 0 WHERE user_id = ?", (user_id,))
            conn.commit()

        conn.close()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä—É—á–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤: {e}")

async def main():
    await client.start(phone)
    print("‚úÖ UserBot –ø–æ–¥–∫–ª—é—á–µ–Ω –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–∞—Å—Ç–æ—è—â–∏–º–∏ Telegram –ø–æ–¥–∞—Ä–∫–∞–º–∏!")
    
    gift_monitor = TelegramGiftMonitor()
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: –æ–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ç–∞–ª–æ–≥ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    await gift_monitor.update_gift_catalog()

    while True:
        try:
            # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ –ø–æ–¥–∞—Ä–∫–∏ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
            new_gifts = await gift_monitor.check_for_new_gifts()
            
            if new_gifts:
                print(f"üÜï –ù–∞–π–¥–µ–Ω–æ {len(new_gifts)} –Ω–æ–≤—ã—Ö –ø–æ–¥–∞—Ä–∫–æ–≤!")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ç–∞–ª–æ–≥ –≤ –±–∞–∑–µ
                await gift_monitor.update_gift_catalog()
                
                # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–∫—É–ø–∞–µ–º –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∞–≤—Ç–æ–ø–æ–∫—É–ø–∫–æ–π
                await auto_buy_new_gifts(new_gifts)
            
            # 2. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä—É—á–Ω—ã–µ –∑–∞–∫–∞–∑—ã
            await process_manual_orders()
            
            if not new_gifts:
                print("‚è≥ –ú–æ–Ω–∏—Ç–æ—Ä–∏–º –Ω–æ–≤—ã–µ –ø–æ–¥–∞—Ä–∫–∏...")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –≥–ª–∞–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
            
        await asyncio.sleep(30)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥

if __name__ == "__main__":
    asyncio.run(main())

