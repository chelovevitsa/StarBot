from telethon import TelegramClient
from telethon.tl.functions.messages import GetBotCallbackAnswerRequest
from telethon.tl.types import InputBotInlineMessageID
import sqlite3
import asyncio

# –î–∞–Ω–Ω—ã–µ Telegram API (–∑–∞–º–µ–Ω–∏ —Å–≤–æ–∏–º–∏)
api_id = 23355959
api_hash = 'b1f4e47d212838b44762a1c3b04fe37f'
phone = '+48795405315'

# –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç
client = TelegramClient("user_session", api_id, api_hash)

async def click_button(message, button_index=0, row_index=0):
    """
    –ù–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É –ø–æ –∏–Ω–¥–µ–∫—Å—É –≤ inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ
    """
    try:
        btn = message.reply_markup.rows[row_index].buttons[button_index]
        await client(GetBotCallbackAnswerRequest(
            peer=message.peer_id,
            msg_id=message.id,
            data=btn.data
        ))
        print(f"‚úÖ –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞: {btn.text}")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏: {e}")
        return False

async def find_button_by_text(message, button_text):
    """
    –ù–∞–π—Ç–∏ –∏ –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É –ø–æ —Ç–µ–∫—Å—Ç—É
    """
    try:
        if not message.reply_markup:
            return False
            
        for row_idx, row in enumerate(message.reply_markup.rows):
            for btn_idx, btn in enumerate(row.buttons):
                if button_text.lower() in btn.text.lower():
                    await click_button(message, btn_idx, row_idx)
                    return True
        
        print(f"‚ùå –ö–Ω–æ–ø–∫–∞ '{button_text}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∫–Ω–æ–ø–∫–∏: {e}")
        return False

async def main():
    await client.start(phone)
    print("‚úÖ Userbot –ø–æ–¥–∫–ª—é—á–µ–Ω –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç –ø–æ–∫—É–ø–∫–∏...")

    while True:
        conn = sqlite3.connect("users.db")
        cursor = conn.cursor()
        cursor.execute("SELECT user_id, stars, gift_count, max_price, released_thousands FROM users WHERE want_to_buy = 1")
        buyers = cursor.fetchall()

        for user_id, stars, gift_count, max_price, released_thousands in buyers:
            print(f"\nüéÅ –ü–æ–∫—É–ø–∞–µ–º –ø–æ–¥–∞—Ä–æ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            print(f"üí´ –ó–≤—ë–∑–¥: {stars}")
            print(f"üìã –ù–∞—Å—Ç—Ä–æ–π–∫–∏: {gift_count} –ø–æ–¥–∞—Ä–∫–æ–≤ –ø–æ {max_price}‚ÇΩ")
            
            # –ó–¥–µ—Å—å ‚Äî —ç–º—É–ª—è—Ü–∏—è –ø–æ–∫—É–ø–æ–∫ —á–µ—Ä–µ–∑ Telethon: –ø–æ—Å—ã–ª–∞–µ–º –∫–æ–º–∞–Ω–¥—ã/–Ω–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥—Ä—É–≥–æ–º—É –±–æ—Ç—É
            await buy_gift_through_bot(user_id, gift_count, max_price)

            # –°–Ω–∏–º–∞–µ–º —Ñ–ª–∞–≥ want_to_buy –∏ —É–º–µ–Ω—å—à–∞–µ–º –∑–≤–µ–∑–¥—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ü–µ–Ω–µ –∑–∞ –ø–æ–¥–∞—Ä–æ–∫)
            gift_cost = 10  # –£—Å–ª–æ–≤–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –æ–¥–Ω–æ–≥–æ –ø–æ–¥–∞—Ä–∫–∞ –≤ –∑–≤—ë–∑–¥–∞—Ö
            total_cost = gift_count * gift_cost
            
            if stars >= total_cost:
                cursor.execute("UPDATE users SET want_to_buy=0, stars = stars - ? WHERE user_id = ?", (total_cost, user_id))
                print(f"‚úÖ –ü–æ–∫—É–ø–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ü–æ—Ç—Ä–∞—á–µ–Ω–æ {total_cost} –∑–≤—ë–∑–¥")
            else:
                cursor.execute("UPDATE users SET want_to_buy=0 WHERE user_id = ?", (user_id,))
                print(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤—ë–∑–¥! –ù—É–∂–Ω–æ {total_cost}, –µ—Å—Ç—å {stars}")
            
            conn.commit()

        if not buyers:
            print("‚è≥ –ù–µ—Ç –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤...")
            
        conn.close()
        await asyncio.sleep(5)  # –ü—Ä–æ–≤–µ—Ä—è—Ç—å –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥

async def buy_gift_through_bot(user_id, gift_count, max_price):
    """
    –†–µ–∞–ª—å–Ω–æ–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –±–æ—Ç–æ–º –ø–æ–¥–∞—Ä–∫–æ–≤ —á–µ—Ä–µ–∑ Telethon
    """
    try:
        # –ó–∞–º–µ–Ω–∏—Ç–µ '@gift_bot' –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π username –±–æ—Ç–∞ –ø–æ–¥–∞—Ä–∫–æ–≤
        bot_username = '@gift_bot'  # –ù–∞–ø—Ä–∏–º–µ—Ä: '@AutoGiftsBot'
        
        print(f"ü§ñ –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–æ—Ç—É {bot_username}...")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º /start –±–æ—Ç—É
        start_msg = await client.send_message(bot_username, '/start')
        await asyncio.sleep(2)
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –±–æ—Ç–∞
        messages = await client.get_messages(bot_username, limit=5)
        latest_msg = messages[0]
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –∫–Ω–æ–ø–∫–∏ –≤ –æ—Ç–≤–µ—Ç–µ
        if latest_msg.reply_markup:
            print("üîç –ò—â–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–∏—Å–∫–∞/–∫–∞—Ç–∞–ª–æ–≥–∞...")
            
            # –ò—â–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
            search_keywords = ['–ø–æ–∏—Å–∫', '–∫–∞—Ç–∞–ª–æ–≥', '–ø–æ–¥–∞—Ä–∫–∏', 'gifts', 'search', 'browse']
            
            button_found = False
            for keyword in search_keywords:
                if await find_button_by_text(latest_msg, keyword):
                    button_found = True
                    break
            
            if not button_found:
                # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ —Ç–µ–∫—Å—Ç—É, –Ω–∞–∂–∏–º–∞–µ–º –ø–µ—Ä–≤—É—é –∫–Ω–æ–ø–∫—É
                await click_button(latest_msg, 0, 0)
            
            await asyncio.sleep(2)
            
            # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            messages = await client.get_messages(bot_username, limit=3)
            latest_msg = messages[0]
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –ø–æ —Ü–µ–Ω–µ
            print(f"üí∞ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∏–ª—å—Ç—Ä —Ü–µ–Ω—ã –¥–æ {max_price}‚ÇΩ...")
            
            # –ò—â–µ–º –∫–Ω–æ–ø–∫–∏ —Ñ–∏–ª—å—Ç—Ä–∞ —Ü–µ–Ω—ã
            price_keywords = ['—Ü–µ–Ω–∞', 'price', '—Ñ–∏–ª—å—Ç—Ä', 'filter', '–¥–æ', 'up to']
            
            for keyword in price_keywords:
                if await find_button_by_text(latest_msg, keyword):
                    await asyncio.sleep(1)
                    break
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ü–µ–Ω—É —Ç–µ–∫—Å—Ç–æ–º (–µ—Å–ª–∏ –±–æ—Ç –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã)
            await client.send_message(bot_username, f'–¥–æ {max_price}')
            await asyncio.sleep(2)
            
            # –ü—Ä–æ—Ü–µ—Å—Å –ø–æ–∫—É–ø–∫–∏ –ø–æ–¥–∞—Ä–∫–æ–≤
            for i in range(gift_count):
                print(f"üéÅ –ü–æ–∫—É–ø–∞–µ–º –ø–æ–¥–∞—Ä–æ–∫ #{i+1}...")
                
                # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                messages = await client.get_messages(bot_username, limit=3)
                latest_msg = messages[0]
                
                # –ò—â–µ–º –∫–Ω–æ–ø–∫—É "–ö—É–ø–∏—Ç—å" –∏–ª–∏ "Buy"
                buy_keywords = ['–∫—É–ø–∏—Ç—å', 'buy', '–∑–∞–∫–∞–∑–∞—Ç—å', 'order', 'üíé', '‚≠ê']
                
                buy_found = False
                for keyword in buy_keywords:
                    if await find_button_by_text(latest_msg, keyword):
                        buy_found = True
                        await asyncio.sleep(1)
                        break
                
                if not buy_found:
                    print(f"‚ùå –ö–Ω–æ–ø–∫–∞ –ø–æ–∫—É–ø–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –ø–æ–¥–∞—Ä–∫–∞ #{i+1}")
                    continue
                
                # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏ (–µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è)
                await asyncio.sleep(1)
                messages = await client.get_messages(bot_username, limit=2)
                if messages[0].reply_markup:
                    confirm_keywords = ['–ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', 'confirm', '–¥–∞', 'yes', '‚úÖ']
                    for keyword in confirm_keywords:
                        if await find_button_by_text(messages[0], keyword):
                            break
                
                await asyncio.sleep(2)
            
            print("‚úÖ –í—Å–µ –ø–æ–¥–∞—Ä–∫–∏ —É—Å–ø–µ—à–Ω–æ –∫—É–ø–ª–µ–Ω—ã!")
            
        else:
            print("‚ùå –ë–æ—Ç –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –∫–Ω–æ–ø–∫–∞–º–∏")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ —á–µ—Ä–µ–∑ –±–æ—Ç–∞: {e}")

if __name__ == "__main__":
    asyncio.run(main())

